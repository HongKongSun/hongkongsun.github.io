(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{717:function(t,e,a){"use strict";a.r(e);var s=a(5),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"_1-必考-watch-和-computed-和-methods-区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-必考-watch-和-computed-和-methods-区别是什么"}},[t._v("#")]),t._v(" "),a("code",[t._v("1")]),t._v(".必考：watch 和 computed 和 methods 区别是什么？")]),t._v(" "),a("p",[a("strong",[t._v("computed：")]),t._v(" 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed  的值；")]),t._v(" "),a("p",[a("strong",[t._v("watch：")]),t._v(" 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；")]),t._v(" "),a("p",[a("strong",[t._v("methods")]),t._v("：同一函数定义为一个 method 或者一个计算属性。对于最终的结果，两种方式确实是相同的。但是计算属性，只要值没有发生改变，访问就不会再次执行函数，而method只要访问发生渲染，就会执行该函数；")]),t._v(" "),a("p",[a("strong",[t._v("运用场景：")])]),t._v(" "),a("ul",[a("li",[t._v("当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；")]),t._v(" "),a("li",[t._v("当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。")])]),t._v(" "),a("h3",{attrs:{id:"_2-必考-谈谈你对-vue-生命周期的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-必考-谈谈你对-vue-生命周期的理解"}},[t._v("#")]),t._v(" "),a("code",[t._v("2")]),t._v(".必考：谈谈你对 Vue 生命周期的理解？")]),t._v(" "),a("p",[a("strong",[t._v("（1）生命周期是什么？")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -> 渲染、更新 -> \t渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。\n")])])]),a("p",[a("strong",[t._v("（2）各个生命周期的作用（Vue 有哪些生命周期钩子函数？分别有什么用？）")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("beforeCreate")]),t._v("（创建前）在数据观测和初始化事件还未开始，组件实例被创建之初，组件的属性生效之前")]),t._v(" "),a("li",[a("strong",[t._v("created")]),t._v("（创建后）    完成数据观测，属性和方法的运算，初始化事件，但真实 dom 还没有生成，"),a("code",[t._v("$el")]),t._v("属性还没有显示出来，"),a("code",[t._v("$el")]),t._v("还不可用")]),t._v(" "),a("li",[a("strong",[t._v("beforeMount")]),t._v("（载入前）    在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。")]),t._v(" "),a("li",[a("strong",[t._v("mounted")]),t._v("（载入后）    在el 被新创建的 "),a("code",[t._v("vm.$el")]),t._v(" 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。")]),t._v(" "),a("li",[a("strong",[t._v("beforeUpdate")]),t._v("（更新前）    在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。")]),t._v(" "),a("li",[a("strong",[t._v("updated")]),t._v("（更新后）    在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。")]),t._v(" "),a("li",[a("strong",[t._v("activated")]),t._v("：keep-alive组件激活时调")]),t._v(" "),a("li",[a("strong",[t._v("deactivated")]),t._v("：keep-alive组件停用时调用")]),t._v(" "),a("li",[a("strong",[t._v("beforeDestroy")]),t._v("（销毁前）    在实例销毁之前调用。实例仍然完全可用。")]),t._v(" "),a("li",[a("strong",[t._v("destroyed")]),t._v("（销毁后）    在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。")])]),t._v(" "),a("p",[a("strong",[t._v("（3）生命周期示意图")])]),t._v(" "),a("img",{staticStyle:{zoom:"200%"},attrs:{src:"https://user-gold-cdn.xitu.io/2019/8/19/16ca74f183827f46?imageslim",alt:"img"}}),t._v(" "),a("h3",{attrs:{id:"_3-父与子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-父与子"}},[t._v("#")]),t._v(" 3.父与子")]),t._v(" "),a("h4",{attrs:{id:"_1-必考-vue如何实现组件间通讯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-必考-vue如何实现组件间通讯"}},[t._v("#")]),t._v(" "),a("code",[t._v("1")]),t._v(".必考：Vue如何实现组件间通讯")]),t._v(" "),a("p",[t._v("Vue 组件间通信是面试常考的知识点之一，这题有点类似于开放题，你回答出越多方法当然越加分，表明你对 Vue 掌握的越熟练。Vue 组件间通信只要指以下 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信，下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。")]),t._v(" "),a("p",[a("strong",[t._v("（1）"),a("code",[t._v("props / $emit")]),t._v("  适用 父子组件通信")])]),t._v(" "),a("p",[t._v("这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。")]),t._v(" "),a("p",[a("strong",[t._v("（2）"),a("code",[t._v("ref")]),t._v(" 与 "),a("code",[t._v("$parent / $children")]),t._v(" 适用 父子组件通信")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ref")]),t._v("：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例")]),t._v(" "),a("li",[a("code",[t._v("$parent")]),t._v(" / "),a("code",[t._v("$children")]),t._v("：访问父 / 子实例")])]),t._v(" "),a("p",[a("strong",[t._v("（3）"),a("code",[t._v("EventBus （$emit / $on）")]),t._v("  适用于 父子、隔代、兄弟组件通信")])]),t._v(" "),a("p",[t._v("这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。")]),t._v(" "),a("p",[a("strong",[t._v("（4）"),a("code",[t._v("$attrs")]),t._v("/"),a("code",[t._v("$listeners")]),t._v(" 适用于 隔代组件通信")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("$attrs")]),t._v("：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 "),a("code",[t._v('v-bind="$attrs"')]),t._v(" 传入内部组件。通常配合 inheritAttrs 选项一起使用。")]),t._v(" "),a("li",[a("code",[t._v("$listeners")]),t._v("：包含了父作用域中的 (不含 .native 修饰器的)  v-on 事件监听器。它可以通过 "),a("code",[t._v('v-on="$listeners"')]),t._v(" 传入内部组件")])]),t._v(" "),a("p",[a("strong",[t._v("（5）"),a("code",[t._v("provide / inject")]),t._v(" 适用于 隔代组件通信")])]),t._v(" "),a("p",[t._v("祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。")]),t._v(" "),a("p",[a("strong",[t._v("（6）Vuex  适用于 父子、隔代、兄弟组件通信")])]),t._v(" "),a("p",[t._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。")]),t._v(" "),a("ul",[a("li",[t._v("Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。")]),t._v(" "),a("li",[t._v("改变 store 中的状态的唯一途径就是显式地提交  (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。")])]),t._v(" "),a("h4",{attrs:{id:"_2、vue-的父组件和子组件生命周期钩子函数执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、vue-的父组件和子组件生命周期钩子函数执行顺序"}},[t._v("#")]),t._v(" 2、Vue 的父组件和子组件生命周期钩子函数执行顺序？")]),t._v(" "),a("p",[t._v("Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("加载渲染过程")]),t._v(" "),a("p",[t._v("父 beforeCreate -> 父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted")])]),t._v(" "),a("li",[a("p",[t._v("子组件更新过程")]),t._v(" "),a("p",[t._v("父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated")])]),t._v(" "),a("li",[a("p",[t._v("父组件更新过程")]),t._v(" "),a("p",[t._v("父 beforeUpdate -> 父 updated")])]),t._v(" "),a("li",[a("p",[t._v("销毁过程")]),t._v(" "),a("p",[t._v("父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed")])])]),t._v(" "),a("h4",{attrs:{id:"_3、父组件可以监听到子组件的生命周期吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、父组件可以监听到子组件的生命周期吗"}},[t._v("#")]),t._v(" 3、父组件可以监听到子组件的生命周期吗？")]),t._v(" "),a("p",[t._v("比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，可以通过以下写法实现：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// Parent.vue\n<Child @mounted="doSomething"/>\n    \n// Child.vue\nmounted() {\n  this.$emit("mounted");\n}\n')])])]),a("p",[t._v("以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//  Parent.vue\n<Child @hook:mounted=\"doSomething\" ></Child>\n\ndoSomething() {\n   console.log('父组件监听到 mounted 钩子函数 ...');\n},\n    \n//  Child.vue\nmounted(){\n   console.log('子组件触发 mounted 钩子函数 ...');\n},    \n    \n// 以上输出顺序为：\n// 子组件触发 mounted 钩子函数 ...\n// 父组件监听到 mounted 钩子函数 ...  \n")])])]),a("p",[t._v("当然 @hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。")]),t._v(" "),a("h4",{attrs:{id:"_4-vue组件间的参数传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue组件间的参数传递"}},[t._v("#")]),t._v(" 4.Vue组件间的参数传递")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("父组件与子组件传值 父组件传给子组件：子组件通过props方法接受数据; 子组件传给父组件："),a("code",[t._v("$emit")]),t._v("方法传递参数")])]),t._v(" "),a("li",[a("p",[t._v("非父子组件间的数据传递，兄弟组件传值 eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适。（虽然也有不少人推荐直接用VUEX，具体来说看需求咯。技术只是手段，目的达到才是王道。）")])])]),t._v(" "),a("h3",{attrs:{id:"_4-必考-vue-数据响应式怎么做到的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-必考-vue-数据响应式怎么做到的"}},[t._v("#")]),t._v(" "),a("code",[t._v("4")]),t._v(".必考：Vue 数据响应式怎么做到的？")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("如何追踪变化")])])]),t._v(" "),a("p",[t._v("当你把一个普通的 "),a("strong",[t._v("JavaScript")]),t._v("对象传入 "),a("strong",[t._v("Vue")]),t._v(" 实例作为 "),a("strong",[t._v("data")]),t._v(" 选项，"),a("strong",[t._v("Vue")]),t._v(" 将遍历此对象所有的属性，并使用 "),a("code",[t._v("Object.defineProperty")]),t._v(" 把这些属性全部转为 "),a("strong",[t._v("getter/setter")]),t._v("。")]),t._v(" "),a("p",[t._v("当页面使用或修改对应属性时，首先会进行依赖收集 (收集当前组件的watcher) ，如果属性发生变化，则会通知相关依赖进行更新操作(发布订阅)。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("响应式数据")])])]),t._v(" "),a("p",[t._v("受现代 "),a("strong",[t._v("JavaScript")]),t._v(" 的限制，"),a("strong",[t._v("Vue")]),t._v(" 无法检测到对象属性的添加或删除。")]),t._v(" "),a("p",[t._v("由于 "),a("strong",[t._v("Vue")]),t._v(" 会在初始化实例时对属性执行 "),a("strong",[t._v("getter/setter")]),t._v(" 转化，所以属性必须在 "),a("strong",[t._v("data")]),t._v(" 对象上存在才能让 "),a("strong",[t._v("Vue")]),t._v(" 将它转换为响应式的。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Vue.set this.$set")])])]),t._v(" "),a("p",[a("strong",[t._v("Vue")]),t._v(" 不能检测到对象属性的添加或删除，解决方法是手动调用 "),a("strong",[t._v("Vue.set")]),t._v(" 或者 "),a("strong",[t._v("this.$set")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_5-必考-vue-set-是做什么用的-vue-怎么用-vm-set-解决对象新增属性不能响应的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-必考-vue-set-是做什么用的-vue-怎么用-vm-set-解决对象新增属性不能响应的问题"}},[t._v("#")]),t._v(" "),a("code",[t._v("5")]),t._v(".必考：vue.set 是做什么用的？（Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？）")]),t._v(" "),a("p",[t._v("受现代 JavaScript 的限制 ，Vue "),a("strong",[t._v("无法检测到对象属性的添加或删除")]),t._v("。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。但是 Vue 提供了 "),a("code",[t._v("Vue.set (object, propertyName, value) / vm.$set (object, propertyName, value)")]),t._v("  来实现为对象添加响应式属性。")]),t._v(" "),a("p",[t._v("阅读过源码可知，"),a("code",[t._v("vm.$set")]),t._v(" 的实现原理是：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果目标是数组，直接使用数组的 splice 方法触发响应式；")])]),t._v(" "),a("li",[a("p",[t._v("如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用   defineReactive 方法进行响应式处理（ defineReactive 方法就是  Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）")])])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("问题拓展：直接给一个数组项赋值，Vue 能检测到变化吗？")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("由于 JavaScript 的限制，Vue 不能检测到以下数组的变动：\n")])])]),a("ul",[a("li",[a("p",[t._v("当你利用索引直接设置一个数组项时，例如："),a("code",[t._v("vm.items[indexOfItem] = newValue")])])]),t._v(" "),a("li",[a("p",[t._v("当你修改数组的长度时，例如："),a("code",[t._v("vm.items.length = newLength")])]),t._v(" "),a("p",[t._v("为了解决第一个问题，Vue 提供了以下操作方法：")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  // Vue.set\n  Vue.set(vm.items, indexOfItem, newValue)\n  // vm.$set，Vue.set的一个别名\n  vm.$set(vm.items, indexOfItem, newValue)\n  // Array.prototype.splice\n  vm.items.splice(indexOfItem, 1, newValue)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("为了解决第二个问题，Vue 提供了以下操作方法：\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  // Array.prototype.splice\n  vm.items.splice(newLength)\n")])])]),a("h3",{attrs:{id:"_6、说说你对-spa-单页面的理解-它的优缺点分别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、说说你对-spa-单页面的理解-它的优缺点分别是什么"}},[t._v("#")]),t._v(" 6、说说你对 SPA 单页面的理解，它的优缺点分别是什么？")]),t._v(" "),a("p",[t._v("SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。")]),t._v(" "),a("p",[a("strong",[t._v("优点：")])]),t._v(" "),a("ul",[a("li",[t._v("用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；")]),t._v(" "),a("li",[t._v("基于上面一点，SPA 相对对服务器压力小；")]),t._v(" "),a("li",[t._v("前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；")])]),t._v(" "),a("p",[a("strong",[t._v("缺点：")])]),t._v(" "),a("ul",[a("li",[t._v("初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；")]),t._v(" "),a("li",[t._v("前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；")]),t._v(" "),a("li",[t._v("SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。")])]),t._v(" "),a("h3",{attrs:{id:"_7、v-show-与-v-if-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、v-show-与-v-if-有什么区别"}},[t._v("#")]),t._v(" "),a("code",[t._v("7")]),t._v("、v-show 与 v-if 有什么区别？")]),t._v(" "),a("p",[a("strong",[t._v("v-if")]),t._v(" 是"),a("strong",[t._v("真正")]),t._v("的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是"),a("strong",[t._v("惰性的")]),t._v("：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。")]),t._v(" "),a("p",[a("strong",[t._v("v-show")]),t._v(" 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。")]),t._v(" "),a("p",[t._v("所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。")]),t._v(" "),a("h3",{attrs:{id:"_8、class-与-style-如何动态绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、class-与-style-如何动态绑定"}},[t._v("#")]),t._v(" 8、Class 与 Style 如何动态绑定？")]),t._v(" "),a("p",[t._v("Class 可以通过对象语法和数组语法进行动态绑定：")]),t._v(" "),a("ul",[a("li",[t._v("对象语法：")])]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("v-bind:")]),t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{ active: isActive, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("text-danger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v(": hasError }"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\ndata: {\n  isActive: true,\n  hasError: false\n}\n")])])]),a("ul",[a("li",[t._v("数组语法：")])]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("v-bind:")]),t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("[isActive ? activeClass : "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v(", errorClass]"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\ndata: {\n  activeClass: 'active',\n  errorClass: 'text-danger'\n}\n")])])]),a("p",[t._v("Style 也可以通过对象语法和数组语法进行动态绑定：")]),t._v(" "),a("ul",[a("li",[t._v("对象语法：")])]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("v-bind:")])]),a("span",{pre:!0,attrs:{class:"token style-attr language-css"}},[a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("style")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('="')]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" activeColor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("fontSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fontSize + "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\ndata: {\n  activeColor: 'red',\n  fontSize: 30\n}\n")])])]),a("ul",[a("li",[t._v("数组语法：")])]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("v-bind:")])]),a("span",{pre:!0,attrs:{class:"token style-attr language-css"}},[a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("style")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('="')]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("[styleColor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" styleSize]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\ndata: {\n  styleColor: {\n     color: 'red'\n   },\n  styleSize:{\n     fontSize:'23px'\n  }\n}\n")])])]),a("h3",{attrs:{id:"_9、什么是-mvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、什么是-mvvm"}},[t._v("#")]),t._v(" "),a("code",[t._v("9")]),t._v("、什么是 MVVM？")]),t._v(" "),a("p",[t._v("Model–View–ViewModel （MVVM） 是一个软件架构设计模式，由微软 WPF 和 Silverlight 的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的事件驱动编程方式。由 John Gossman（同样也是 WPF 和 Silverlight 的架构师）于2005年在他的博客上发表")]),t._v(" "),a("p",[t._v("MVVM 源自于经典的 Model–View–Controller（MVC）模式  ，MVVM 的出现促进了前端开发与后端业务逻辑的分离，极大地提高了前端开发效率，MVVM 的核心是 ViewModel 层，它就像是一个中转站（value converter），负责转换 Model 中的数据对象来让数据变得更容易管理和使用，该层向上与视图层进行双向数据绑定，向下与 Model 层通过接口请求进行数据交互，起呈上启下作用。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/8/19/16ca75871ec53fba?imageslim",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("View 层：View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建 。")])]),t._v(" "),a("li",[a("p",[t._v("Model 层：Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，对于前端来说就是后端提供的 api 接口。")])]),t._v(" "),a("li",[a("p",[t._v("ViewModel 层")]),t._v(" "),a("p",[t._v("ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的，比如页面的这一块展示什么，而页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互），视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层。")])])]),t._v(" "),a("p",[t._v("MVVM 框架实现了双向绑定，这样 ViewModel 的内容会实时展现在 View 层，前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图，MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新。这样 View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。")]),t._v(" "),a("p",[t._v("我们以下通过一个 Vue 实例来说明 MVVM 的具体实现，有 Vue 开发经验的同学应该一目了然：")]),t._v(" "),a("p",[t._v("（1）View 层")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{message}}"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("button")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("v-on:")]),t._v("click")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("showMessage()"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Click me"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("button")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("（2）ViewModel 层")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[t._v("var app = new Vue({\n    el: '#app',\n    data: {  // 用于描述视图状态   \n        message: 'Hello Vue!', \n    },\n    methods: {  // 用于描述视图行为  \n        showMessage(){\n            let vm = this;\n            alert(vm.message);\n        }\n    },\n    created(){\n        let vm = this;\n        // Ajax 获取 Model 层的数据\n        ajax({\n            url: '/your/server/data/api',\n            success(res){\n                vm.message = res;\n            }\n        });\n    }\n})\n")])])]),a("p",[t._v("（3） Model 层")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[t._v('{\n    "url": "/your/server/data/api",\n    "res": {\n        "success": true,\n        "name": "IoveC",\n        "domain": "www.cnblogs.com"\n    }\n}\n')])])]),a("h3",{attrs:{id:"_10-vue-router"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-vue-router"}},[t._v("#")]),t._v(" "),a("code",[t._v("10")]),t._v(".Vue-Router")]),t._v(" "),a("h4",{attrs:{id:"_1-vue-router-路由模式有几种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue-router-路由模式有几种"}},[t._v("#")]),t._v(" 1.vue-router 路由模式有几种？")]),t._v(" "),a("p",[t._v("vue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'history'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HTML5History")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hash'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashHistory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abstract'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractHistory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("invalid mode: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("mode"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("其中，3 种路由模式的说明如下：")]),t._v(" "),a("ul",[a("li",[t._v("hash:  使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；")]),t._v(" "),a("li",[t._v("history :  依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；")]),t._v(" "),a("li",[t._v("abstract :  支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.")])]),t._v(" "),a("h4",{attrs:{id:"_2-能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗"}},[t._v("#")]),t._v(" 2.能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？")]),t._v(" "),a("p",[a("strong",[t._v("（1）hash 模式的实现原理")])]),t._v(" "),a("p",[t._v("早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 '#search'：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("https://www.word.com#search\n复制代码\n")])])]),a("p",[t._v("hash  路由模式的实现主要是基于下面几个特性：")]),t._v(" "),a("ul",[a("li",[t._v("URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；")]),t._v(" "),a("li",[t._v("hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；")]),t._v(" "),a("li",[t._v("可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用  JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；")]),t._v(" "),a("li",[t._v("我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。")])]),t._v(" "),a("p",[a("strong",[t._v("（2）history 模式的实现原理")])]),t._v(" "),a("p",[t._v("HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("window.history.pushState(null, null, path);\nwindow.history.replaceState(null, null, path);\n复制代码\n")])])]),a("p",[t._v("history 路由模式的实现主要基于存在下面几个特性：")]),t._v(" "),a("ul",[a("li",[t._v("pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；")]),t._v(" "),a("li",[t._v("我们可以使用 popstate  事件来监听 url 的变化，从而对页面进行跳转（渲染）；")]),t._v(" "),a("li",[t._v("history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。")])]),t._v(" "),a("h4",{attrs:{id:"_3-route-和-router的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-route-和-router的区别"}},[t._v("#")]),t._v(" 3."),a("code",[t._v("$route")]),t._v(" 和 "),a("code",[t._v("$router")]),t._v("的区别")]),t._v(" "),a("p",[t._v("答："),a("code",[t._v("$route")]),t._v("是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。而"),a("code",[t._v("$router")]),t._v("是“路由实例”对象包括了路由的跳转方法，钩子函数等。")]),t._v(" "),a("h4",{attrs:{id:"_4-vuerouter你怎么用的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-vuerouter你怎么用的"}},[t._v("#")]),t._v(" 4.VueRouter你怎么用的？")]),t._v(" "),a("p",[t._v("hash主要依赖location.hash来改动 URL,达到不刷新跳转的效果.每次 hash 改变都会触发hashchange事件(来响应路由的变化,比如页面的更换)\nhistory主要利用了 HTML5的 historyAPI 来实现,用pushState和replaceState来操作浏览历史记录栈")]),t._v(" "),a("h3",{attrs:{id:"_11-怎样理解-vue-的单向数据流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-怎样理解-vue-的单向数据流"}},[t._v("#")]),t._v(" 11.怎样理解 Vue 的单向数据流？")]),t._v(" "),a("p",[t._v("所有的 prop 都使得其父子 prop 之间形成了一个"),a("strong",[t._v("单向下行绑定")]),t._v("：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。")]),t._v(" "),a("p",[t._v("额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。子组件想修改时，只能通过 "),a("code",[t._v("$emit")]),t._v(" 派发一个自定义事件，父组件接收到后，由父组件修改。")]),t._v(" "),a("p",[t._v("有两种常见的试图改变一个 prop 的情形 :")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。")]),t._v(" 在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("props: ['initialCounter'],\ndata: function () {\n  return {\n    counter: this.initialCounter\n  }\n}\n复制代码\n")])])]),a("ul",[a("li",[a("strong",[t._v("这个 prop 以一种原始的值传入且需要进行转换。")]),t._v(" 在这种情况下，最好使用这个 prop 的值来定义一个计算属性")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("props: ['size'],\ncomputed: {\n  normalizedSize: function () {\n    return this.size.trim().toLowerCase()\n  }\n}\n复制代码\n")])])]),a("h3",{attrs:{id:"_12-vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-vuex"}},[t._v("#")]),t._v(" 12.Vuex")]),t._v(" "),a("h4",{attrs:{id:"_1-vuex是什么-怎么使用-哪种功能场景使用它-与cookie的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-vuex是什么-怎么使用-哪种功能场景使用它-与cookie的区别"}},[t._v("#")]),t._v(" 1.Vuex是什么？怎么使用？哪种功能场景使用它？与cookie的区别？")]),t._v(" "),a("p",[t._v("只用来读取的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。")]),t._v(" "),a("p",[t._v("场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车.")]),t._v(" "),a("p",[a("strong",[t._v("state")]),t._v(" ：Vuex 使用单一状态树,即每个应用将仅仅包含一个store 实例，但单一状态树和模块化并不冲突。存放的数据状态，不可以直接修改里面的数据。")]),t._v(" "),a("p",[a("strong",[t._v("mutations")]),t._v(" ：mutations定义的方法动态修改Vuex 的 store 中的状态或数据。")]),t._v(" "),a("p",[a("strong",[t._v("getters")]),t._v(" ：类似vue的计算属性，主要用来过滤一些数据。")]),t._v(" "),a("p",[a("strong",[t._v("action")]),t._v(" ：actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据。view 层通过 store.dispath 来分发 action。")]),t._v(" "),a("h4",{attrs:{id:"_2-你使用过-vuex-吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-你使用过-vuex-吗"}},[t._v("#")]),t._v(" 2.你使用过 Vuex 吗？")]),t._v(" "),a("p",[t._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。")]),t._v(" "),a("p",[t._v("（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。")]),t._v(" "),a("p",[t._v("（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。")]),t._v(" "),a("p",[t._v("主要包括以下几个模块：")]),t._v(" "),a("ul",[a("li",[t._v("State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。")]),t._v(" "),a("li",[t._v("Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。")]),t._v(" "),a("li",[t._v("Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。")]),t._v(" "),a("li",[t._v("Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。")]),t._v(" "),a("li",[t._v("Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。")])]),t._v(" "),a("h3",{attrs:{id:"_13、组件中-data-为什么是一个函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13、组件中-data-为什么是一个函数"}},[t._v("#")]),t._v(" 13、组件中 data 为什么是一个函数？")]),t._v(" "),a("blockquote",[a("p",[t._v("为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// data\ndata() {\n  return {\n\tmessage: \"子组件\",\n\tchildName:this.name\n  }\n}\n\n// new Vue\nnew Vue({\n  el: '#app',\n  router,\n  template: '<App/>',\n  components: {App}\n})\n\n")])])]),a("p",[t._v("因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响，如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。")]),t._v(" "),a("h3",{attrs:{id:"_14、v-model-的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14、v-model-的原理"}},[t._v("#")]),t._v(" 14、v-model 的原理？")]),t._v(" "),a("p",[t._v("我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select 等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：")]),t._v(" "),a("ul",[a("li",[t._v("text 和 textarea 元素使用 value 属性和 input 事件；")]),t._v(" "),a("li",[t._v("checkbox 和 radio 使用 checked 属性和 change 事件；")]),t._v(" "),a("li",[t._v("select 字段将 value 作为 prop 并将 change 作为事件。")])]),t._v(" "),a("p",[t._v("以 input  表单元素为例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<input v-model=\'something\'>\n    \n相当于\n\n<input v-bind:value="something" v-on:input="something = $event.target.value">\n')])])]),a("p",[t._v("如果在自定义组件中，v-model 默认会利用名为 value 的 prop 和名为 input 的事件，如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("父组件：\n<ModelChild v-model=\"message\"></ModelChild>\n\n子组件：\n<div>{{value}}</div>\n\nprops:{\n    value: String\n},\nmethods: {\n  test1(){\n     this.$emit('input', '小红')\n  },\n},\n")])])]),a("h3",{attrs:{id:"_15-使用过-vue-ssr-吗-说说-ssr-服务端渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-使用过-vue-ssr-吗-说说-ssr-服务端渲染"}},[t._v("#")]),t._v(" 15.使用过 Vue SSR 吗？说说 SSR？(服务端渲染)")]),t._v(" "),a("blockquote",[a("p",[t._v('Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记"激活"为客户端上完全可交互的应用程序。')]),t._v(" "),a("p",[t._v("即：SSR大致的意思就是vue在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的html 片段直接返回给客户端这个过程就叫做服务端渲染。")])]),t._v(" "),a("p",[a("strong",[t._v("服务端渲染 SSR 的优缺点如下：")])]),t._v(" "),a("p",[a("strong",[t._v("（1）服务端渲染的优点：")])]),t._v(" "),a("ul",[a("li",[t._v("更好的 SEO： 因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；")]),t._v(" "),a("li",[t._v("更快的内容到达时间（首屏加载更快）： SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；")])]),t._v(" "),a("p",[a("strong",[t._v("（2) 服务端渲染的缺点：")])]),t._v(" "),a("ul",[a("li",[t._v("更多的开发条件限制： 例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；")]),t._v(" "),a("li",[t._v("更多的服务器负载：在 Node.js  中渲染完整的应用程序，显然会比仅仅提供静态文件的  server 更加大量占用CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 ( high traffic ) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。")])]),t._v(" "),a("h3",{attrs:{id:"_16、vue-是如何实现数据双向绑定的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16、vue-是如何实现数据双向绑定的"}},[t._v("#")]),t._v(" 16、Vue 是如何实现数据双向绑定的？")]),t._v(" "),a("p",[t._v("Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据，如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/8/19/16ca75871f2e5f80?imageslim",alt:"img"}})]),t._v(" "),a("p",[t._v("即：")]),t._v(" "),a("ul",[a("li",[t._v("输入框内容变化时，Data 中的数据同步变化。即 View => Data 的变化。")]),t._v(" "),a("li",[t._v("Data 中的数据变化时，文本节点的内容同步变化。即 Data => View 的变化。")])]),t._v(" "),a("p",[t._v("其中，View 变化更新 Data ，可以通过事件监听的方式来实现，所以 Vue 的数据双向绑定的工作主要是如何根据 Data 变化更新 View。")]),t._v(" "),a("p",[t._v("Vue 主要通过以下 4 个步骤来实现数据双向绑定的：")]),t._v(" "),a("p",[t._v("实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。")]),t._v(" "),a("p",[t._v("实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。")]),t._v(" "),a("p",[t._v("实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。")]),t._v(" "),a("p",[t._v("实现一个订阅器 Dep：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。")]),t._v(" "),a("p",[t._v("以上四个步骤的流程图表示如下，如果有同学理解不大清晰的，可以查看作者专门介绍数据双向绑定的文章"),a("a",{attrs:{href:"https://juejin.im/post/5d421bcf6fb9a06af23853f1",target:"_blank",rel:"noopener noreferrer"}},[t._v("《0 到 1 掌握：Vue 核心之数据双向绑定》"),a("OutboundLink")],1),t._v("，有进行详细的讲解、以及代码 demo 示例。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/8/19/16ca75871f729d89?imageslim",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"_17-虚拟dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-虚拟dom"}},[t._v("#")]),t._v(" 17.虚拟DOM")]),t._v(" "),a("h4",{attrs:{id:"_1、比较两棵虚拟-dom-树的差异-diff-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、比较两棵虚拟-dom-树的差异-diff-算法"}},[t._v("#")]),t._v(" 1、比较两棵虚拟 "),a("code",[t._v("DOM")]),t._v(" 树的差异 — "),a("code",[t._v("diff")]),t._v(" 算法")]),t._v(" "),a("p",[a("code",[t._v("diff")]),t._v(" 算法用来比较两棵 "),a("code",[t._v("Virtual DOM")]),t._v(" 树的差异，如果需要两棵树的完全比较，那么 "),a("code",[t._v("diff")]),t._v(" 算法的时间复杂度为"),a("code",[t._v("O(n^3)")]),t._v("。但是在前端当中，你很少会跨越层级地移动 "),a("code",[t._v("DOM")]),t._v(" 元素，所以 "),a("code",[t._v("Virtual DOM")]),t._v(" 只会对同一个层级的元素进行对比，如下图所示， "),a("code",[t._v("div")]),t._v(" 只会和同一层级的 "),a("code",[t._v("div")]),t._v(" 对比，第二层级的只会跟第二层级对比，这样算法复杂度就可以达到 "),a("code",[t._v("O(n)")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/7/23/16c1e26a5ecf086e?imageslim",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("（1）深度优先遍历，记录差异")])]),t._v(" "),a("p",[t._v("在实际的代码中，会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个唯一的标记：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/7/23/16c1e0e2873e42b1?imageslim",alt:"img"}})]),t._v(" "),a("p",[t._v("在深度优先遍历的时候，每遍历到一个节点就把该节点和新的的树进行对比。如果有差异的话就记录到一个对象里面。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// diff 函数，对比两棵树\nfunction diff(oldTree, newTree) {\n  var index = 0 // 当前节点的标志\n  var patches = {} // 用来记录每个节点差异的对象\n  dfsWalk(oldTree, newTree, index, patches)\n  return patches\n}\n\n// 对两棵树进行深度优先遍历\nfunction dfsWalk(oldNode, newNode, index, patches) {\n  var currentPatch = []\n  if (typeof (oldNode) === "string" && typeof (newNode) === "string") {\n    // 文本内容改变\n    if (newNode !== oldNode) {\n      currentPatch.push({ type: patch.TEXT, content: newNode })\n    }\n  } else if (newNode!=null && oldNode.tagName === newNode.tagName && oldNode.key === newNode.key) {\n    // 节点相同，比较属性\n    var propsPatches = diffProps(oldNode, newNode)\n    if (propsPatches) {\n      currentPatch.push({ type: patch.PROPS, props: propsPatches })\n    }\n    // 比较子节点，如果子节点有\'ignore\'属性，则不需要比较\n    if (!isIgnoreChildren(newNode)) {\n      diffChildren(\n        oldNode.children,\n        newNode.children,\n        index,\n        patches,\n        currentPatch\n      )\n    }\n  } else if(newNode !== null){\n    // 新节点和旧节点不同，用 replace 替换\n    currentPatch.push({ type: patch.REPLACE, node: newNode })\n  }\n\n  if (currentPatch.length) {\n    patches[index] = currentPatch\n  }\n} \n')])])]),a("p",[t._v("从以上可以得出，"),a("code",[t._v("patches[1]")]),t._v(" 表示 "),a("code",[t._v("p")]),t._v(" ，"),a("code",[t._v("patches[3]")]),t._v(" 表示 "),a("code",[t._v("ul")]),t._v(" ，以此类推。")]),t._v(" "),a("p",[a("strong",[t._v("（2）差异类型")])]),t._v(" "),a("p",[a("code",[t._v("DOM")]),t._v(" 操作导致的差异类型包括以下几种：")]),t._v(" "),a("ul",[a("li",[t._v("节点替换：节点改变了，例如将上面的 "),a("code",[t._v("div")]),t._v(" 换成 "),a("code",[t._v("h1")]),t._v(";")]),t._v(" "),a("li",[t._v("顺序互换：移动、删除、新增子节点，例如上面 "),a("code",[t._v("div")]),t._v(" 的子节点，把 "),a("code",[t._v("p")]),t._v(" 和 "),a("code",[t._v("ul")]),t._v(" 顺序互换；")]),t._v(" "),a("li",[t._v("属性更改：修改了节点的属性，例如把上面 "),a("code",[t._v("li")]),t._v(" 的 "),a("code",[t._v("class")]),t._v(" 样式类删除；")]),t._v(" "),a("li",[t._v("文本改变：改变文本节点的文本内容，例如将上面 "),a("code",[t._v("p")]),t._v(" 节点的文本内容更改为 “"),a("code",[t._v("Real Dom")]),t._v("”；")])]),t._v(" "),a("h4",{attrs:{id:"_2-虚拟-dom-的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟-dom-的优缺点"}},[t._v("#")]),t._v(" 2.虚拟 DOM 的优缺点？")]),t._v(" "),a("p",[a("strong",[t._v("优点：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("保证性能下限：")]),t._v(" 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；")]),t._v(" "),a("li",[a("strong",[t._v("无需手动操作 DOM：")]),t._v(" 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；")]),t._v(" "),a("li",[a("strong",[t._v("跨平台：")]),t._v(" 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。")])]),t._v(" "),a("p",[a("strong",[t._v("缺点:")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("无法进行极致优化：")]),t._v(" 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。")])]),t._v(" "),a("h4",{attrs:{id:"_3-虚拟-dom-实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-虚拟-dom-实现原理"}},[t._v("#")]),t._v(" 3.虚拟 DOM 实现原理？")]),t._v(" "),a("p",[t._v("虚拟 DOM 的实现原理主要包括以下 3 部分：")]),t._v(" "),a("ul",[a("li",[t._v("用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；")]),t._v(" "),a("li",[t._v("diff 算法 — 比较两棵虚拟 DOM 树的差异；")]),t._v(" "),a("li",[t._v("pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。")])]),t._v(" "),a("p",[t._v("如果对以上 3 个部分还不是很了解的同学，可以查看本文作者写的另一篇详解虚拟 DOM 的文章《"),a("a",{attrs:{href:"https://juejin.im/post/5d36cc575188257aea108a74#heading-14",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入剖析：Vue核心之虚拟DOM"),a("OutboundLink")],1),t._v("》")]),t._v(" "),a("h3",{attrs:{id:"_18、vue-中的-key-有什么作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18、vue-中的-key-有什么作用"}},[t._v("#")]),t._v(" 18、Vue 中的 key 有什么作用？")]),t._v(" "),a("p",[t._v("key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有4种比较方式：newStartIndex 和oldStartIndex 、newEndIndex 和  oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx > EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较。具体有无 key 的 diff 过程，可以查看作者写的另一篇详解虚拟 DOM 的文章《"),a("a",{attrs:{href:"https://juejin.im/post/5d36cc575188257aea108a74#heading-14",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入剖析：Vue核心之虚拟DOM"),a("OutboundLink")],1),t._v("》")]),t._v(" "),a("p",[t._v("所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速")]),t._v(" "),a("p",[a("strong",[t._v("更准确")]),t._v("：因为带 key 就不是就地复用了，在 sameNode 函数 "),a("code",[t._v("a.key === b.key")]),t._v(" 对比中可以避免就地复用的情况。所以会更加准确。")]),t._v(" "),a("p",[a("strong",[t._v("更快速")]),t._v("：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，源码如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function createKeyToOldIdx (children, beginIdx, endIdx) {\n  let i, key\n  const map = {}\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key\n    if (isDef(key)) map[key] = i\n  }\n  return map\n}\n")])])]),a("p",[a("strong",[t._v("vue中 key 值的作用？")])]),t._v(" "),a("p",[t._v("答：当 Vue.js 用 v-for  正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，  而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。key的作用主要是为了高效的更新虚拟DOM。")]),t._v(" "),a("h3",{attrs:{id:"_19、你有对-vue-项目进行哪些优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19、你有对-vue-项目进行哪些优化"}},[t._v("#")]),t._v(" 19、你有对 Vue 项目进行哪些优化？")]),t._v(" "),a("p",[t._v("如果没有对 Vue 项目没有进行过优化总结的同学，可以参考本文作者的另一篇文章"),a("a",{attrs:{href:"https://juejin.im/post/5d548b83f265da03ab42471d",target:"_blank",rel:"noopener noreferrer"}},[t._v("《 Vue 项目性能优化 — 实践指南 》"),a("OutboundLink")],1),t._v("，文章主要介绍从 3 个大方面，22 个小方面详细讲解如何进行 Vue 项目的优化。")]),t._v(" "),a("p",[a("strong",[t._v("（1）代码层面的优化")])]),t._v(" "),a("ul",[a("li",[t._v("v-if 和 v-show 区分使用场景")]),t._v(" "),a("li",[t._v("computed 和 watch  区分使用场景")]),t._v(" "),a("li",[t._v("v-for 遍历必须为 item 添加 key，且避免同时使用 v-if")]),t._v(" "),a("li",[t._v("长列表性能优化")]),t._v(" "),a("li",[t._v("事件的销毁")]),t._v(" "),a("li",[t._v("图片资源懒加载")]),t._v(" "),a("li",[t._v("路由懒加载")]),t._v(" "),a("li",[t._v("第三方插件的按需引入")]),t._v(" "),a("li",[t._v("优化无限列表性能")]),t._v(" "),a("li",[t._v("服务端渲染 SSR or 预渲染")])]),t._v(" "),a("p",[a("strong",[t._v("（2）Webpack 层面的优化")])]),t._v(" "),a("ul",[a("li",[t._v("Webpack 对图片进行压缩")]),t._v(" "),a("li",[t._v("减少 ES6 转为 ES5 的冗余代码")]),t._v(" "),a("li",[t._v("提取公共代码")]),t._v(" "),a("li",[t._v("模板预编译")]),t._v(" "),a("li",[t._v("提取组件的 CSS")]),t._v(" "),a("li",[t._v("优化 SourceMap")]),t._v(" "),a("li",[t._v("构建结果输出分析")]),t._v(" "),a("li",[t._v("Vue 项目的编译优化")])]),t._v(" "),a("p",[a("strong",[t._v("（3）基础的 Web 技术的优化")])]),t._v(" "),a("ul",[a("li",[t._v("开启 gzip 压缩")]),t._v(" "),a("li",[t._v("浏览器缓存")]),t._v(" "),a("li",[t._v("CDN 的使用")]),t._v(" "),a("li",[t._v("使用 Chrome Performance 查找性能瓶颈")])]),t._v(" "),a("h3",{attrs:{id:"_20-vue-3-新特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-vue-3-新特性"}},[t._v("#")]),t._v(" 20. Vue 3 新特性")]),t._v(" "),a("p",[a("code",[t._v("Vue 3")]),t._v(" 的设计目标是更快，更小，并更好的支持 "),a("code",[t._v("TypeScript")]),t._v(" 。")]),t._v(" "),a("p",[t._v("一些新特性包括:")]),t._v(" "),a("blockquote",[a("p",[t._v("1、Composition API 2、Multiple root elements 3、Suspense 4、Multiple V-models 5、Reactivity 6、Teleport 7、Transition 8、Remove Filter 9、App configuration")])]),t._v(" "),a("h4",{attrs:{id:"_1、composition-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、composition-api"}},[t._v("#")]),t._v(" 1、Composition API")]),t._v(" "),a("p",[t._v("Vue 官方发布了 "),a("code",[t._v("Composition API")]),t._v(" 的官方插件，使广大用户可以在 "),a("code",[t._v("Vue2.x")]),t._v(" 中享受 "),a("code",[t._v("Function Base")]),t._v(" 带来的新体验。")]),t._v(" "),a("p",[t._v("而在 "),a("code",[t._v("vue 3")]),t._v(" 中无需单独安装插件，开箱即用。")]),t._v(" "),a("p",[t._v("打开 "),a("code",[t._v("App.vue")]),t._v("，你会看到 "),a("code",[t._v("setup()")]),t._v("方法:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <img src="./logo.png">\n  <h1>Hello Vue 3!</h1>\n  <button @click="inc">Clicked {{ count }} times.</button>\n</template>\n\n<script>\nimport { ref } from \'vue\'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    const inc = () => {\n      count.value++\n    }\n\n    return {\n      count,\n      inc\n    }\n  }\n}\n<\/script>\n\n<style scoped>\nimg {\n  width: 200px;\n}\nh1 {\n  font-family: Arial, Helvetica, sans-serif;\n}\n</style>\n\n复制代码\n')])])]),a("p",[a("code",[t._v("Composition API")]),t._v(" 主要提供两大好处：")]),t._v(" "),a("p",[t._v("1、清晰的代码结构 2、消除重复逻辑")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <div class="counter">\n    <p>count: {{ count }}</p>\n    <p>NewVal (count + 2): {{ countDouble }}</p>\n    <button @click="inc">Increment</button>\n    <button @click="dec">Decrement</button>\n    <p> Message: {{ msg }} </p>\n    <button @click="changeMessage()">Change Message</button>\n  </div>\n</template>\n<script>\nimport { ref, computed, watch } from \'vue\'\nexport default {\n  setup() {\n    /* ---------------------------------------------------- */\n    let count = ref(0)\n    const countDouble = computed(() => count.value * 2)\n    watch(count, newVal => {\n      console.log(\'count changed\', newVal)\n    })\n    const inc = () => {\n      count.value += 1\n    }\n    const dec = () => {\n      if (count.value !== 0) {\n        count.value -= 1\n      }\n    }\n    /* ---------------------------------------------------- */\n    let msg= ref(\'some text\')\n    watch(msg, newVal => {\n      console.log(\'msg changed\', newVal)\n    })\n    const changeMessage = () => {\n      msg.value = "new Message"\n    }\n    /* ---------------------------------------------------- */\n    return {\n      count,\n      inc,\n      dec,\n      countDouble,\n      msg,\n      changeMessage\n    }\n  }\n}\n<\/script>\n复制代码\n')])])]),a("p",[t._v("如果你不喜欢使用 "),a("code",[t._v("Composition API")]),t._v(", 也可以继续使用 "),a("code",[t._v("2.x")]),t._v(" 的传统方法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <div class="counter">\n    <p>count: {{ count }}</p>\n    <p>NewVal (count + 2): {{ countDouble }}</p>\n    <button @click="inc">Increment</button>\n    <button @click="dec">Decrement</button>\n    <p> Message: {{ msg }} </p>\n    <button @click="changeMessage()">Change Message</button>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      count: 0,\n      msg: \'some message\'\n    }\n  },\n  computed: {\n    countDouble() {\n      return this.count*2\n    }\n  },\n  watch: {\n    count(newVal) {\n      console.log(\'count changed\', newVal)\n    },\n    msg(newVal) {\n      console.log(\'msg changed\', newVal)\n    }\n  },\n  methods: {\n     inc() {\n      this.count += 1\n    },\n    dec() {\n      if (this.count !== 0) {\n        this.count -= 1\n      }\n    },\n    changeMessage() {\n      msg = "new Message"\n    }\n  }\n\n}\n<\/script>\n复制代码\n')])])]),a("blockquote",[a("p",[t._v("上面两段代码在效果上市完全等价的")])]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("Composition API")]),t._v(" 的好处：可以让我们更好地组织代码("),a("code",[t._v("state")]),t._v(", "),a("code",[t._v("methods")]),t._v(", "),a("code",[t._v("computed properties")]),t._v(", "),a("code",[t._v("watcher")]),t._v(" 等)。")]),t._v(" "),a("p",[t._v("随着组件规模的增长，如何组织我们的业务代码逐渐变成一个重要的问题，确保新进的开发人员都可以轻松地理解代码，而不需要花太多时间。")]),t._v(" "),a("p",[t._v("以前我们会使用 "),a("code",[t._v("mixin")]),t._v(" 来复用代码。然而，"),a("code",[t._v("mixin")]),t._v(" 最大的痛点是，需要我们跟踪不同组件中的状态和方法，这往往会给开发带来一定的心智负担，一不小心，"),a("code",[t._v("mixin")]),t._v(" 可能会覆盖组件中的现有状态或方法。")]),t._v(" "),a("p",[a("strong",[t._v("使用 "),a("code",[t._v("Composition API")]),t._v(" 让代码复用更加容易。")])]),t._v(" "),a("p",[t._v("我们同样可以抽取出重复功能的代码:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// message.js\nimport { ref, watch } from "vue";\nexport function message() {\n  let msg = ref(123);\n  watch(msg, (newVal) => {\n    console.log("msg changed", newVal);\n  });\n  const changeMessage = () => {\n    msg.value = "new Message";\n  };\n  return { msg, changeMessage };\n}\n复制代码\n')])])]),a("p",[t._v("在其他组件中使用上面组件:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <div class="counter">\n    <p>count: {{ count }}</p>\n    <p>NewVal (count + 2): {{ countDouble }}</p>\n    <button @click="inc">Increment</button>\n    <button @click="dec">Decrement</button>\n    <p>Message: {{ msg }}</p>\n    <button @click="changeMessage()">change message</button>\n  </div>\n</template>\n<script>\nimport { ref, computed, watch } from \'vue\'\nimport { message } from \'./common/message\'\nexport default {\n  setup() {\n    let count = ref(0)\n    const countDouble = computed(() => count.value * 2)\n    watch(count, newVal => {\n      console.log(\'count changed\', newVal)\n    })\n    const inc = () => {\n      count.value += 1\n    }\n    const dec = () => {\n      if (count.value !== 0) {\n        count.value -= 1\n      }\n    }\n    let { msg, changeMessage } = message()\n    return {\n      count,\n      msg,\n      changeMessage,\n      inc,\n      dec,\n      countDouble\n    }\n  }\n}\n<\/script>\n复制代码\n')])])]),a("h4",{attrs:{id:"_2、multiple-root-elements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、multiple-root-elements"}},[t._v("#")]),t._v(" 2、Multiple root elements")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("Vue 2")]),t._v(" 中，tempalte 只能取一个根元素。即使我们只有两个 "),a("code",[t._v("<p>")]),t._v(" 标记，我们也必须将它们包含在一个 "),a("code",[t._v("<div>")]),t._v("标记中：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <div class="counter">\n    <p> Count: {{ count }} </p>\n    <button @click="increment"> Increment </button>\n    <button @click="decrement"> Decrement</button>\n  </div>\n</template>\n复制代码\n')])])]),a("p",[t._v("为了能编译通过，我们通常会增加一个根节点。")]),t._v(" "),a("blockquote",[a("p",[t._v("这个设计确实很糟糕，我曾经无数次吐槽过这个设计。因为会带来不必要的代码嵌套和缩进。")])]),t._v(" "),a("p",[t._v("幸好在 "),a("code",[t._v("Vue 3")]),t._v(" 中取消了这一限制：")]),t._v(" "),a("p",[t._v("可以直接在"),a("code",[t._v("<template></template>")]),t._v("中使用任意数量的标签:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <p> Count: {{ count }} </p>\n  <button @click="increment"> Increment </button>\n  <button @click="decrement"> Decrement </button>\n</template>\n复制代码\n')])])]),a("blockquote",[a("p",[t._v("用 VScode 打开模板时，看到一些 "),a("code",[t._v("lint")]),t._v(" 错误，这是因为官方插件 "),a("code",[t._v("eslint-plugin-vue")]),t._v(" 还没有支持新的模板语法。")])]),t._v(" "),a("h4",{attrs:{id:"_3、suspense"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、suspense"}},[t._v("#")]),t._v(" 3、Suspense")]),t._v(" "),a("p",[a("code",[t._v("Suspense")]),t._v(" 是一个 "),a("code",[t._v("Vue 3")]),t._v(" 新特性。")]),t._v(" "),a("p",[t._v("通常前后端交互是一个异步的过程： 默认我们提供一个加载中的动画，当数据返回时配合使用 "),a("code",[t._v("v-if")]),t._v(" 来控制数据显示。")]),t._v(" "),a("p",[a("code",[t._v("Suspense")]),t._v(" 的出现大大简化了这个过程：它提供了 "),a("code",[t._v("default")]),t._v(" 和 "),a("code",[t._v("fallback")]),t._v(" 两种状态：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<template>\n  <Suspense>\n    <template #default>\n      <div v-for=\"item in articleList\" :key=\"item.id\">\n        <article>\n          <h2>{{ item.title }}</h2>\n          <p>{{ item.body }}</p>\n        </article>\n      </div>\n    </template>\n    <template #fallback>\n      Articles loading...\n    </template>\n  </Suspense>\n</template>\n<script>\nimport axios from 'axios'\nexport default {\n  async setup() {\n    let articleList = await axios\n      .get('https://jsonplaceholder.typicode.com/posts')\n      .then(response => {\n        console.log(response)\n        return response.data\n      })\n    return {\n      articleList\n    }\n  }\n}\n<\/script>\n复制代码\n")])])]),a("h4",{attrs:{id:"_4、multiple-v-models"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、multiple-v-models"}},[t._v("#")]),t._v(" 4、Multiple v-models")]),t._v(" "),a("p",[t._v("我们都知道 "),a("code",[t._v("v-models")]),t._v(" 用于双向数据绑定。一般用于与表单元素一起使用。有时我们会在自定义组件中使用它。")]),t._v(" "),a("p",[a("code",[t._v("Vue 2")]),t._v(" 只允许在一个组件上使用一个 "),a("code",[t._v("v-models")]),t._v("。在 "),a("code",[t._v("Vue 3")]),t._v(" 中，我们可以将任意数量的 "),a("code",[t._v("v-model")]),t._v(" 绑定到我们的定制组件上:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <survey-form v-model:name="name" v-model:age="age">\n    {" "}\n  </survey-form>\n</template>\n复制代码\n')])])]),a("p",[t._v("SurveyForm.vue:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n    <div>\n        <label>Name: </label>\n        <input :value="name" @input="updateName($event.target.value)" />\n        <label>Age: </label>\n        <input :value="age" @input="updateAge($event.target.value)" />\n    </div>\n</template>\n<script>\n    export default {\n      props: {\n        name: String,\n        age: Number\n      },\n      setup(props, { emit }) {\n        const updateName = value => {\n          emit(\'update:name\', value)\n        }\n        const updateAge = value => {\n          emit(\'update:age\', +value)\n        }\n        return { updateName, updateAge }\n      }\n    }\n<\/script>\n复制代码\n')])])]),a("h4",{attrs:{id:"_5、reactivity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、reactivity"}},[t._v("#")]),t._v(" 5、Reactivity")]),t._v(" "),a("p",[a("code",[t._v("Vue 2")]),t._v(" 的响应式已经非常棒了，但在少数情况下会存在一些问题：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <div class="hello" @click="test">test {{list }} {{ myObj }}</div>\n</template>\n<script>\nexport default {\n  name: "HelloWorld",\n  data() {\n    return {\n      list: [1, 2],\n      myObj: { name: "Preetish" }\n    };\n  },\n  watch: {\n    list: {\n      handler: () => {\n        console.log("watcher triggered");\n      },\n      deep: true\n    }\n  },\n  methods: {\n    test() {\n      this.list[2] = 4;\n      this.myObj.last = "HS";\n      delete this.myObj.name;\n    }\n  }\n};\n<\/script>\n复制代码\n')])])]),a("p",[t._v("我们发现通过"),a("code",[t._v("this.list")]),t._v("下标来修改元素，并不会触发 "),a("code",[t._v("wacher")]),t._v(" 监听函数，为了达到目的，我们不得不使用 "),a("code",[t._v("vue.set()")]),t._v(" 或 "),a("code",[t._v("vue.delete()")]),t._v(" 这些方法。")]),t._v(" "),a("p",[t._v("而在 "),a("code",[t._v("vue 3")]),t._v(" 中，我们不需要借助其他 API：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('export default {\n  setup() {\n    let list = ref([1, 2]);\n    let myObj = ref({ name: "Preetish" });\n    function myFun() {\n      list.value[3] = 3;\n      myObj.value.last = "HS";\n      delete myObj.value.name;\n    }\n    return { myFun, list, myObj };\n  },\n};\n复制代码\n')])])]),a("h4",{attrs:{id:"_6、portals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、portals"}},[t._v("#")]),t._v(" 6、Portals")]),t._v(" "),a("p",[a("code",[t._v("Portals")]),t._v(" 提供了一种将组件中渲染到页面任意一个 "),a("code",[t._v("DOM")]),t._v(" 节点中的能力。在 "),a("code",[t._v("Vue 2")]),t._v(" 中，利用一个 "),a("code",[t._v("portal-vue")]),t._v(" 的第三方插件来做到这一点。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("vue 3")]),t._v(" 中直接使用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<Teleport to="#modal-layer">\n  <div class="modal">hello</div>\n</Teleport>\n复制代码\n')])])]),a("p",[a("code",[t._v("<Teleport>")]),t._v(" 是 vue3 中提供特定的标签用于创建一个 "),a("code",[t._v("Portals")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("<Teleport> </Teleport>")]),t._v("中间出现的内容会出现在 "),a("code",[t._v("to")]),t._v(" 指定的节点中：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<div id="modal-target"></div>\n复制代码\n')])])]),a("blockquote",[a("p",[t._v("目前为止，"),a("code",[t._v("<Teleport>")]),t._v("在 Alpha 版本中并不能使用")])]),t._v(" "),a("h4",{attrs:{id:"_7、transition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、transition"}},[t._v("#")]),t._v(" 7、Transition")]),t._v(" "),a("p",[t._v("之前我在使用 "),a("code",[t._v("v-enter-active")]),t._v(", "),a("code",[t._v("v-enter")]),t._v(", "),a("code",[t._v("v-enter-to")]),t._v(" 这些个状态时搞的晕头转向。")]),t._v(" "),a("p",[t._v("现在 Vue 3 从命名上更直观了: "),a("code",[t._v("v-enter")]),t._v(" 变成了 "),a("code",[t._v("v-enter-from")]),t._v("，"),a("code",[t._v("v-leave")]),t._v(" 变成 "),a("code",[t._v("v-leave-from")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"_8、remove-filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、remove-filter"}},[t._v("#")]),t._v(" 8、Remove Filter")]),t._v(" "),a("p",[a("code",[t._v("Vue 3")]),t._v(" 抛弃了 "),a("code",[t._v("Filter")]),t._v(" 的用法，更推荐使用计算属性或方法来实现：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\x3c!-- vue 2.x --\x3e\n{{ date | format }}\n\n\x3c!-- vue 3.0 --\x3e\n{{ format(date) }}\n复制代码\n")])])]),a("h4",{attrs:{id:"_9、app-configration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、app-configration"}},[t._v("#")]),t._v(" 9、App configration")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("Vue 2")]),t._v(" 中，如果想使用 "),a("code",[t._v("use()")]),t._v(", "),a("code",[t._v("mixin()")]),t._v(" , "),a("code",[t._v("directive()")]),t._v(" 等方法需要配合全局 "),a("code",[t._v("Vue")]),t._v(" 对象:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import Vue from "vue";\nimport App from "./App";\n\nVue.use(/* ... */);\nVue.mixin(/* ... */);\nVue.component(/* ... */);\nVue.directive(/* ... */);\n\nnew Vue({\n  el: "#app",\n  template: "<App/>",\n  components: {\n    App,\n  },\n});\n复制代码\n')])])]),a("p",[t._v("在 "),a("code",[t._v("Vue 3")]),t._v(" 中， 改成了 "),a("code",[t._v("createApp")]),t._v(" 返回的 "),a("code",[t._v("Vue")]),t._v(" 实例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import { createApp } from "vue";\nimport App from "./App.vue";\n\nconst app = createApp(App);\n\napp.use(/* ... */);\napp.mixin(/* ... */);\napp.component(/* ... */);\napp.directive(/* ... */);\n\napp.mount("#app");\n复制代码\n')])])]),a("h4",{attrs:{id:"结束语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结束语"}},[t._v("#")]),t._v(" 结束语")]),t._v(" "),a("p",[t._v("总之"),a("code",[t._v("Vue 3")]),t._v(" 通过提供一种简单的方式来组织和共享代码，并提供强大的 "),a("code",[t._v("TypeScript")]),t._v(" 支持，新的代码组织方式会对未来的应用开发产生重大影响。")]),t._v(" "),a("p",[t._v("同时一些其它的特性，如 "),a("code",[t._v("Suspense")]),t._v("，多个 "),a("code",[t._v("v-models")]),t._v(" 等也会给开发带来巨大的便利。")]),t._v(" "),a("p",[t._v("同时性能更快，体积更小")]),t._v(" "),a("h3",{attrs:{id:"_21-路由守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-路由守卫"}},[t._v("#")]),t._v(" 21.路由守卫")]),t._v(" "),a("h4",{attrs:{id:"_1-全局前置守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局前置守卫"}},[t._v("#")]),t._v(" 1.全局前置守卫")]),t._v(" "),a("p",[t._v("你可以使用 "),a("code",[t._v("router.beforeEach")]),t._v(" 注册一个全局前置守卫：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" router "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VueRouter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 "),a("strong",[t._v("等待中")]),t._v("。")]),t._v(" "),a("p",[t._v("每个守卫方法接收三个参数：")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("to: Route")])]),t._v(": 即将要进入的目标 "),a("a",{attrs:{href:"https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("路由对象"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("strong",[a("code",[t._v("from: Route")])]),t._v(": 当前导航正要离开的路由")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("next: Function")])]),t._v(": 一定要调用该方法来 "),a("strong",[t._v("resolve")]),t._v(" 这个钩子。执行效果依赖 "),a("code",[t._v("next")]),t._v(" 方法的调用参数。\n"),a("ul",[a("li",[a("strong",[a("code",[t._v("next()")])]),t._v(": 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 "),a("strong",[t._v("confirmed")]),t._v(" (确认的)。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("next(false)")])]),t._v(": 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 "),a("code",[t._v("from")]),t._v(" 路由对应的地址。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("next('/')")]),t._v(" 或者 "),a("code",[t._v("next({ path: '/' })")])]),t._v(": 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 "),a("code",[t._v("next")]),t._v(" 传递任意位置对象，且允许设置诸如 "),a("code",[t._v("replace: true")]),t._v("、"),a("code",[t._v("name: 'home'")]),t._v(" 之类的选项以及任何用在 "),a("a",{attrs:{href:"https://router.vuejs.org/zh/api/#to",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("router-link")]),t._v(" 的 "),a("code",[t._v("to")]),t._v(" prop"),a("OutboundLink")],1),t._v(" 或 "),a("a",{attrs:{href:"https://router.vuejs.org/zh/api/#router-push",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("router.push")]),a("OutboundLink")],1),t._v(" 中的选项。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("next(error)")])]),t._v(": (2.4.0+) 如果传入 "),a("code",[t._v("next")]),t._v(" 的参数是一个 "),a("code",[t._v("Error")]),t._v(" 实例，则导航会被终止且该错误会被传递给 "),a("a",{attrs:{href:"https://router.vuejs.org/zh/api/#router-onerror",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("router.onError()")]),a("OutboundLink")],1),t._v(" 注册过的回调。")])])])]),t._v(" "),a("p",[t._v("**确保 "),a("code",[t._v("next")]),t._v(" 函数在任何给定的导航守卫中都被严格调用一次。它可以出现多于一次，但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错。**这里有一个在用户未能验证身份时重定向到 "),a("code",[t._v("/login")]),t._v(" 的示例：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BAD")]),t._v("\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Login'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isAuthenticated"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Login'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果用户未能验证身份，则 `next` 会被调用两次")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// GOOD")]),t._v("\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Login'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isAuthenticated"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Login'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"_2-全局解析守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-全局解析守卫"}},[t._v("#")]),t._v(" 2.全局解析守卫")]),t._v(" "),a("blockquote",[a("p",[t._v("2.5.0 新增")])]),t._v(" "),a("p",[t._v("在 2.5.0+ 你可以用 "),a("code",[t._v("router.beforeResolve")]),t._v(" 注册一个全局守卫。这和 "),a("code",[t._v("router.beforeEach")]),t._v(" 类似，区别是在导航被确认之前，"),a("strong",[t._v("同时在所有组件内守卫和异步路由组件被解析之后")]),t._v("，解析守卫就被调用。")]),t._v(" "),a("h4",{attrs:{id:"_3-全局后置钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-全局后置钩子"}},[t._v("#")]),t._v(" 3.全局后置钩子")]),t._v(" "),a("p",[t._v("你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 "),a("code",[t._v("next")]),t._v(" 函数也不会改变导航本身：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"_4-路由独享的守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-路由独享的守卫"}},[t._v("#")]),t._v(" 4.路由独享的守卫")]),t._v(" "),a("p",[t._v("你可以在路由配置上直接定义 "),a("code",[t._v("beforeEnter")]),t._v(" 守卫：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" router "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VueRouter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  routes"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      component"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("beforeEnter")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这些守卫与全局前置守卫的方法参数是一样的。")]),t._v(" "),a("h4",{attrs:{id:"_5-组件内的守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-组件内的守卫"}},[t._v("#")]),t._v(" 5.组件内的守卫")]),t._v(" "),a("p",[t._v("最后，你可以在路由组件内直接定义以下路由导航守卫：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("beforeRouteEnter")])]),t._v(" "),a("li",[a("code",[t._v("beforeRouteUpdate")]),t._v(" (2.2 新增)")]),t._v(" "),a("li",[a("code",[t._v("beforeRouteLeave")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeRouteEnter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在渲染该组件的对应路由被 confirm 前调用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不！能！获取组件实例 `this`")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为当守卫执行前，组件实例还没被创建")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeRouteUpdate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在当前路由改变，但是该组件被复用时调用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以访问组件实例 `this`")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeRouteLeave")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 导航离开该组件的对应路由时调用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以访问组件实例 `this`")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("beforeRouteEnter")]),t._v(" 守卫 "),a("strong",[t._v("不能")]),t._v(" 访问 "),a("code",[t._v("this")]),t._v("，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建。")]),t._v(" "),a("p",[t._v("不过，你可以通过传一个回调给 "),a("code",[t._v("next")]),t._v("来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeRouteEnter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("vm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 `vm` 访问组件实例")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意 "),a("code",[t._v("beforeRouteEnter")]),t._v(" 是支持给 "),a("code",[t._v("next")]),t._v(" 传递回调的唯一守卫。对于 "),a("code",[t._v("beforeRouteUpdate")]),t._v(" 和 "),a("code",[t._v("beforeRouteLeave")]),t._v(" 来说，"),a("code",[t._v("this")]),t._v(" 已经可用了，所以"),a("strong",[t._v("不支持")]),t._v("传递回调，因为没有必要了。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeRouteUpdate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// just use `this`")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 "),a("code",[t._v("next(false)")]),t._v(" 来取消。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeRouteLeave")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" answer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("confirm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Do you really want to leave? you have unsaved changes!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("answer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_6-完整的导航解析流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-完整的导航解析流程"}},[t._v("#")]),t._v(" 6.完整的导航解析流程")]),t._v(" "),a("ol",[a("li",[t._v("导航被触发。")]),t._v(" "),a("li",[t._v("在失活的组件里调用 "),a("code",[t._v("beforeRouteLeave")]),t._v(" 守卫。")]),t._v(" "),a("li",[t._v("调用全局的 "),a("code",[t._v("beforeEach")]),t._v(" 守卫。")]),t._v(" "),a("li",[t._v("在重用的组件里调用 "),a("code",[t._v("beforeRouteUpdate")]),t._v(" 守卫 (2.2+)。")]),t._v(" "),a("li",[t._v("在路由配置里调用 "),a("code",[t._v("beforeEnter")]),t._v("。")]),t._v(" "),a("li",[t._v("解析异步路由组件。")]),t._v(" "),a("li",[t._v("在被激活的组件里调用 "),a("code",[t._v("beforeRouteEnter")]),t._v("。")]),t._v(" "),a("li",[t._v("调用全局的 "),a("code",[t._v("beforeResolve")]),t._v(" 守卫 (2.5+)。")]),t._v(" "),a("li",[t._v("导航被确认。")]),t._v(" "),a("li",[t._v("调用全局的 "),a("code",[t._v("afterEach")]),t._v(" 钩子。")]),t._v(" "),a("li",[t._v("触发 DOM 更新。")]),t._v(" "),a("li",[t._v("用创建好的实例调用 "),a("code",[t._v("beforeRouteEnter")]),t._v(" 守卫中传给 "),a("code",[t._v("next")]),t._v(" 的回调函数")])]),t._v(" "),a("h3",{attrs:{id:"_22、说说你使用-vue-框架踩过最大的坑是什么-怎么解决的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22、说说你使用-vue-框架踩过最大的坑是什么-怎么解决的"}},[t._v("#")]),t._v(" 22、说说你使用 Vue 框架踩过最大的坑是什么？怎么解决的？")]),t._v(" "),a("p",[t._v("就是之前在写一个VUE组件的时候，当时我是要，我想用代码来说，口述好像说不清楚。就是当时传一个button组件，我当时想的是，用户要想把他变为一个圆角的话，只需要通过props传一个round这个东西就可以了，问题就是 我当时写的时候，props当时传进去的竟是一个空的字符串，当时被困扰了很久。在Stack Overflow找查了想问的问题，但是没有解决，最后经过调试发现就是在写里面的 props装饰器的时候，没有去写他的类型。如果不写他的类型的话，他是不会默认把他当做一个布尔值，而是一个空的字符串给传进去的。")]),t._v(" "),a("h3",{attrs:{id:"_23-其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-其他"}},[t._v("#")]),t._v(" 23.其他")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("v-once是做什么的")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("<vue-router>")]),t._v("和"),a("code",[t._v("<router-view>")]),t._v("了解一下")])]),t._v(" "),a("li",[a("p",[t._v("vue自定义过滤器filter")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("全局过滤")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[t._v("Vue.filter('globalFilter', function (value) {\n\n  return value + \"!!!\"\n\n})\n")])])])]),t._v(" "),a("li",[a("p",[t._v("组件过滤器")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[t._v('filters:{\n\n    componentFilter:function(value){\n         return value + "!!!"\n\n    }\n  }\n')])])]),a("p",[t._v("上面有种写法有个需要注意的问题：全局注册时是filter，没有s的。而组件过滤器是filters，是有s的，这要注意了，虽然你写的时候没有s不报错，但是过滤器是没有效果的；")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("使用方法")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在双括号插值")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[t._v("{{ 'abc' | globalFilter }}\n")])])])]),t._v(" "),a("li",[a("p",[t._v("在v-bind 表达式中使用")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("v-bind:")]),t._v("data")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v(" | globalFilter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ul",[a("li",[t._v("过滤器的参数写法\n"),a("ul",[a("li",[t._v(t._s(t._f("filterB")(t._f("filterA")(t.message)))+"message是作为参数传给filterA 函数，而filterA 函数的返回值作为参数传给filterB函数，最终结果显示是由filterB返回的。")]),t._v(" "),a("li",[t._v(t._s(t._f("filterA")(t.message,"arg1",t.arg2))+"filterA的第一个参数是message，依次是‘arg1’,arg2")]),t._v(" "),a("li",[t._v(t._s(t._f("filterB")("a","b"))+"表示'a'和'b'分别作为参数传给filterB")])])])])])])])])]),t._v(" "),a("li",[a("p",[t._v("路由懒加载如何实现")])]),t._v(" "),a("li",[a("p",[t._v("图片懒加载原理是什么")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("css只在当前组件起作用")]),t._v(" 答：在style标签中写入"),a("strong",[t._v("scoped")]),t._v("即可")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("vue.js的两个核心是什么？")]),t._v(" 答：数据驱动、组件系统")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("vue常用的修饰符？")])])]),t._v(" "),a("li",[a("p",[t._v(".prevent: 提交事件不再重载页面；")]),t._v(" "),a("ul",[a("li",[t._v(".stop: 阻止单击事件冒泡；")]),t._v(" "),a("li",[t._v(".self: 当事件发生在该元素本身而不是子元素的时候会触发；")]),t._v(" "),a("li",[t._v(".capture: 事件侦听，事件发生的时候会调用")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("v-on 可以绑定多个方法吗？")]),t._v(" 答：可以")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("什么是vue的计算属性？")])])]),t._v(" "),a("li",[a("p",[t._v("在模板中放入太多的逻辑会让模板过重且难以维护，在需要对数据进行复杂处理，且可能多次使用的情况下，尽量采取计算属性的方式。")])]),t._v(" "),a("li",[a("p",[t._v("好处：①使得数据处理结构清晰；②依赖于数据，数据更新，处理结果自动更新；③计算属性内部this指向vm实例；④在template调用时，直接写计算属性名即可；⑤常用的是getter方法，获取数据，也可以使用set方法改变数据；⑥相较于methods，不管依赖的数据变不变，methods都会重新计算，但是依赖数据不变的时候computed从缓存中获取，不会重新计算。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("在哪个生命周期内调用异步请求？")])]),t._v(" "),a("p",[t._v("可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是本人推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：")]),t._v(" "),a("ul",[a("li",[t._v("能更快获取到服务端数据，减少页面 loading 时间；")]),t._v(" "),a("li",[t._v("ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("在什么阶段才能访问操作DOM？")])]),t._v(" "),a("p",[t._v("在钩子函数 mounted 被调用前，Vue 已经将编译好的模板挂载到页面上，所以在 mounted 中可以访问操作 DOM。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("谈谈你对 keep-alive 的了解？")])]),t._v(" "),a("p",[t._v("keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：")]),t._v(" "),a("ul",[a("li",[t._v("一般结合路由和动态组件一起使用，用于缓存组件；")]),t._v(" "),a("li",[t._v("提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；")]),t._v(" "),a("li",[t._v("对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Vue 框架怎么实现对象和数组的监听？")])]),t._v(" "),a("p",[t._v("如果被问到 Vue 怎么实现数据双向绑定，大家肯定都会回答 通过 Object.defineProperty() 对数据进行劫持，但是  "),a("strong",[t._v("Object.defineProperty() 只能对属性进行数据劫持")]),t._v("，"),a("strong",[t._v("不能对整个对象进行劫持")]),t._v("，同理无法对数组进行劫持，但是我们在使用 Vue 框架中都知道，Vue 能检测到对象和数组（部分方法的操作）的变化，那它是怎么实现的呢？我们查看相关代码如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  /**\n   * Observe a list of Array items.\n   */\n  observeArray (items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])  // observe 功能为监测数据的变化\n    }\n  }\n\n  /**\n   * 对属性进行递归遍历\n   */\n  let childOb = !shallow && observe(val) // observe 功能为监测数据的变化\n")])])]),a("p",[t._v("通过以上 Vue 源码部分查看，我们就能知道 "),a("strong",[t._v("Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用  Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Proxy 与 Object.defineProperty 优劣对比")])]),t._v(" "),a("p",[a("strong",[t._v("Proxy 的优势如下:")])]),t._v(" "),a("ul",[a("li",[t._v("Proxy 可以直接监听对象而非属性；")]),t._v(" "),a("li",[t._v("Proxy 可以直接监听数组的变化；")]),t._v(" "),a("li",[t._v("Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；")]),t._v(" "),a("li",[t._v("Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；")]),t._v(" "),a("li",[t._v("Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；")])]),t._v(" "),a("p",[a("strong",[t._v("Object.defineProperty 的优势如下:")])]),t._v(" "),a("ul",[a("li",[t._v("兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。")])])]),t._v(" "),a("li",[a("p",[t._v("v-for 与 v-if 的优先级，以及避免同时使用")]),t._v(" "),a("ul",[a("li",[t._v("两者不要一起使用，v-for比v-if 具有更高的优先级。")])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);