(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{714:function(t,a,s){"use strict";s.r(a);var n=s(5),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"_10-js的基本类型有哪些-引用类型有哪些-null和undefined的区别。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-js的基本类型有哪些-引用类型有哪些-null和undefined的区别。"}},[t._v("#")]),t._v(" 10. js的基本类型有哪些？引用类型有哪些？null和undefined的区别。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("七种数据类型")]),t._v(" "),s("p",[t._v("Boolean\nNull\nUndefined\nNumber\nString\nSymbol (ECMAScript 6 新定义)\nObject\n(ES6之前)其中5种为基本类型:string,number,boolean,null,undefined,")]),t._v(" "),s("p",[t._v("ES6出来的Symbol也是原始数据类型 ，表示独一无二的值")])]),t._v(" "),s("li",[s("p",[t._v("基础数据类型和引用数据类型有什么区别？")]),t._v(" "),s("ul",[s("li",[t._v("存储上，基础数据类型的值是存在栈中，引用数据类型的值是存在堆中，引用数据类型的指针是存在栈中；")]),t._v(" "),s("li",[t._v("赋值上，基础数据类型是按值传递，引用数据类型是按指针传递。由于两者的存储/赋值的不同，也就引来了数据深拷贝的问题。")])])]),t._v(" "),s("li",[s("p",[t._v("Object 为引用类型(范围挺大),也包括数组、函数,")])]),t._v(" "),s("li",[s("p",[t._v("null和undefined的异同点")]),t._v(" "),s("ul",[s("li",[s("blockquote",[s("p",[s("code",[t._v("null")]),t._v('表示"没有对象"，即该处不应该有值')])]),t._v(" "),s("p",[t._v("典型用法：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("作为函数的参数，表示该函数的参数不是对象")])]),t._v(" "),s("li",[s("p",[t._v("作为对象原型链的终点-")])])])]),t._v(" "),s("li",[s("blockquote",[s("p",[s("code",[t._v("undefined")]),t._v('表示"缺少值"，就是此处应该有一个值，但是还没有定义')])]),t._v(" "),s("p",[t._v("典型用法：")]),t._v(" "),s("ol",[s("li",[t._v("变量被声明了，但没有赋值时，就等于"),s("code",[t._v("undefined")])]),t._v(" "),s("li",[t._v("调用函数时，应该提供的参数没有提供，该参数等于"),s("code",[t._v("undefined")])]),t._v(" "),s("li",[t._v("对象没有赋值的属性，该属性的值为"),s("code",[t._v("undefined")])]),t._v(" "),s("li",[t._v("函数没有返回值时，默认返回"),s("code",[t._v("undefined")])])])])])])]),t._v(" "),s("h3",{attrs:{id:"_11-js常见的dom操作api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-js常见的dom操作api"}},[t._v("#")]),t._v(" 11.JS常见的dom操作api")]),t._v(" "),s("h4",{attrs:{id:"节点查找api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节点查找api"}},[t._v("#")]),t._v(" 节点查找API")]),t._v(" "),s("blockquote",[s("p",[t._v("document.getElementById ：根据ID查找元素，大小写敏感，如果有多个结果，只返回第一个；")]),t._v(" "),s("p",[t._v("document.getElementsByClassName ：根据类名查找元素，多个类名用空格分隔，返回一个 HTMLCollection 。注意兼容性为IE9+（含）。另外，不仅仅是document，其它元素也支持 getElementsByClassName 方法；")]),t._v(" "),s("p",[t._v("document.getElementsByTagName ：根据标签查找元素， * 表示查询所有标签，返回一个 HTMLCollection 。")]),t._v(" "),s("p",[t._v("document.getElementsByName ：根据元素的name属性查找，返回一个 NodeList 。")]),t._v(" "),s("p",[t._v("document.querySelector ：返回单个Node，IE8+(含），如果匹配到多个结果，只返回第一个。")]),t._v(" "),s("p",[t._v("document.querySelectorAll ：返回一个 NodeList ，IE8+(含）。")]),t._v(" "),s("p",[t._v("document.forms ：获取当前页面所有form，返回一个 HTMLCollection ；")])]),t._v(" "),s("h4",{attrs:{id:"节点创建api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节点创建api"}},[t._v("#")]),t._v(" 节点创建API")]),t._v(" "),s("h5",{attrs:{id:"createelement创建元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#createelement创建元素"}},[t._v("#")]),t._v(" createElement创建元素：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var elem = document.createElement(\"div\");  \nelem.id = 'haorooms';  \nelem.style = 'color: red';  \nelem.innerHTML = '我是新创建的haorooms测试节点';  \ndocument.body.appendChild(elem);  \n")])])]),s("p",[t._v("通过 createElement 创建的元素并不属于 document 对象，它只是创建出来，并未添加到html文档中，要调用 appendChild 或 insertBefore 等方法将其添加到HTML文档中。")]),t._v(" "),s("h5",{attrs:{id:"createtextnode创建文本节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#createtextnode创建文本节点"}},[t._v("#")]),t._v(" createTextNode创建文本节点：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('var node = document.createTextNode("我是文本节点");  \ndocument.body.appendChild(node);  \n')])])]),s("h5",{attrs:{id:"clonenode-克隆一个节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clonenode-克隆一个节点"}},[t._v("#")]),t._v(" cloneNode 克隆一个节点：")]),t._v(" "),s("p",[t._v("node.cloneNode(true/false) ，它接收一个bool参数，用来表示是否复制子元素。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('var from = document.getElementById("test");  \nvar clone = from.cloneNode(true);  \nclone.id = "test2";  \ndocument.body.appendChild(clone);  \n')])])]),s("p",[t._v("克隆节点并不会克隆事件，除非事件是用")]),t._v(" "),s("p",[t._v("这种方式绑定的，用 addEventListener 和 node.onclick=xxx; 方式绑定的都不会复制。")]),t._v(" "),s("h5",{attrs:{id:"createdocumentfragment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#createdocumentfragment"}},[t._v("#")]),t._v(" createDocumentFragment")]),t._v(" "),s("p",[t._v("本方法用来创建一个 DocumentFragment ，也就是文档碎片，它表示一种轻量级的文档，主要是用来存储临时节点，大量操作DOM时用它可以大大提升性能。")]),t._v(" "),s("h4",{attrs:{id:"节点修改api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节点修改api"}},[t._v("#")]),t._v(" 节点修改API")]),t._v(" "),s("p",[s("strong",[t._v("1、appendChild")])]),t._v(" "),s("p",[t._v("语法：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("parent.appendChild(child);\n")])])]),s("p",[s("strong",[t._v("2、insertBefore")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("parentNode.insertBefore(newNode, refNode);  \n")])])]),s("p",[s("strong",[t._v("3、insertAdjacentHTML")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//js谷歌浏览器，火狐浏览器，IE8+\nel.insertAdjacentHTML('beforebegin', htmlString);\n")])])]),s("p",[t._v("关于insertAdjacentHTML，这个API比较好用，具体可以看：https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\x3c!-- beforebegin --\x3e\n<p>\n  \x3c!-- afterbegin --\x3e\n  foo\n  \x3c!-- beforeend --\x3e\n</p>\n\x3c!-- afterend --\x3e\n")])])]),s("p",[s("strong",[t._v("4、Element.insertAdjacentElement()")])]),t._v(" "),s("p",[t._v("用法和上面类似，")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("targetElement.insertAdjacentElement(position, element);\n")])])]),s("p",[s("strong",[t._v("5、removeChild")])]),t._v(" "),s("p",[t._v("removeChild用于删除指定的子节点并返回子节点，语法：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var deletedChild = parent.removeChild(node);  \n")])])]),s("p",[t._v("deletedChild指向被删除节点的引用，它仍然存在于内存中，可以对其进行下一步操作。另外，如果被删除的节点不是其子节点，则将会报错。一般删除节点都是这么删的：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function removeNode(node)  \n{  \n    if(!node) return;  \n    if(node.parentNode) node.parentNode.removeChild(node);  \n}  \n")])])]),s("p",[s("strong",[t._v("6、replaceChild")])]),t._v(" "),s("p",[t._v("replaceChild用于将一个节点替换另一个节点，语法：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("parent.replaceChild(newChild, oldChild);  \n")])])]),s("h4",{attrs:{id:"节点关系api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节点关系api"}},[t._v("#")]),t._v(" 节点关系API")]),t._v(" "),s("p",[s("strong",[t._v("1、父关系API")])]),t._v(" "),s("blockquote",[s("p",[t._v("parentNode ：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment；")]),t._v(" "),s("p",[t._v("parentElement ：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element元素，如果不是，则返回null；")])]),t._v(" "),s("p",[s("strong",[t._v("2、子关系API")])]),t._v(" "),s("blockquote",[s("p",[t._v("children ：返回一个实时的 HTMLCollection ，子节点都是Element，IE9以下浏览器不支持；")]),t._v(" "),s("p",[t._v("childNodes ：返回一个实时的 NodeList ，表示元素的子节点列表，注意子节点可能包含文本节点、注释节点等；")]),t._v(" "),s("p",[t._v("firstChild ：返回第一个子节点，不存在返回null，与之相对应的还有一个 firstElementChild ；")]),t._v(" "),s("p",[t._v("lastChild ：返回最后一个子节点，不存在返回null，与之相对应的还有一个 lastElementChild ；")])]),t._v(" "),s("p",[s("strong",[t._v("3、兄弟关系型API")])]),t._v(" "),s("blockquote",[s("p",[t._v("previousSibling ：节点的前一个节点，如果不存在则返回null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。")]),t._v(" "),s("p",[t._v("nextSibling ：节点的后一个节点，如果不存在则返回null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。")]),t._v(" "),s("p",[t._v("previousElementSibling ：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。")]),t._v(" "),s("p",[t._v("nextElementSibling ：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。")])]),t._v(" "),s("h4",{attrs:{id:"元素属性型api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元素属性型api"}},[t._v("#")]),t._v(" 元素属性型API")]),t._v(" "),s("p",[s("strong",[t._v("1、setAttribute 给元素设置属性：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("element.setAttribute(name, value);  \n")])])]),s("p",[t._v("其中name是特性名，value是特性值。如果元素不包含该特性，则会创建该特性并赋值。")]),t._v(" "),s("p",[s("strong",[t._v("2、getAttribute")])]),t._v(" "),s("p",[t._v("getAttribute返回指定的特性名相应的特性值，如果不存在，则返回null：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('var value = element.getAttribute("id"); \n')])])]),s("p",[s("strong",[t._v("3、hasAttribute")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('var result = element.hasAttribute(name);\n\nvar foo = document.getElementById("foo"); \nif (foo.hasAttribute("bar")) { \n    // do something\n}\n')])])]),s("p",[s("strong",[t._v("4、dataset")])]),t._v(" "),s("p",[t._v("获取html data-开头的属性，用法如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<div id=\"user\" data-id=\"1234567890\" data-user=\"johndoe\" data-date-of-birth>John Doe</div>\n\nlet el = document.querySelector('#user');\n\n// el.id == 'user'\n// el.dataset.id === '1234567890'\n// el.dataset.user === 'johndoe'\n// el.dataset.dateOfBirth === ''\n\nel.dataset.dateOfBirth = '1960-10-03'; // set the DOB.\n\n// 'someDataAttr' in el.dataset === false\nel.dataset.someDataAttr = 'mydata';\n// 'someDataAttr' in el.dataset === true\n")])])]),s("h4",{attrs:{id:"样式相关api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#样式相关api"}},[t._v("#")]),t._v(" 样式相关API")]),t._v(" "),s("p",[s("strong",[t._v("1、直接修改元素的样式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("elem.style.color = 'red';  \nelem.style.setProperty('font-size', '16px');  \nelem.style.removeProperty('color');  \n")])])]),s("p",[s("strong",[t._v("2、动态添加样式规则")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var style = document.createElement('style');  \nstyle.innerHTML = 'body{color:red} #top:hover{background-color: red;color: white;}';  \ndocument.head.appendChild(style);  \n")])])]),s("p",[s("strong",[t._v("3、classList获取样式class")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('// div is an object reference to a <div> element with class="foo bar"\ndiv.classList.remove("foo");\ndiv.classList.add("anotherclass");\n\n// if visible is set remove it, otherwise add it\ndiv.classList.toggle("visible");\n\n// add/remove visible, depending on test conditional, i less than 10\ndiv.classList.toggle("visible", i < 10 );\n\nalert(div.classList.contains("foo"));\n\n// add or remove multiple classes\ndiv.classList.add("foo", "bar", "baz");\ndiv.classList.remove("foo", "bar", "baz");\n\n// add or remove multiple classes using spread syntax\nlet cls = ["foo", "bar"];\ndiv.classList.add(...cls); \ndiv.classList.remove(...cls);\n\n// replace class "foo" with class "bar"\ndiv.classList.replace("foo", "bar");\n')])])]),s("p",[s("strong",[t._v("4、window.getComputedStyle")])]),t._v(" "),s("p",[t._v("通过 element.sytle.xxx 只能获取到内联样式，借助 window.getComputedStyle 可以获取应用到元素上的所有样式，IE8或更低版本不支持此方法。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var style = window.getComputedStyle(element[, pseudoElt]);  \n")])])]),s("h4",{attrs:{id:"获取相关高度api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取相关高度api"}},[t._v("#")]),t._v(" 获取相关高度API")]),t._v(" "),s("p",[t._v("关于js的高度，我再慕课网上面也录制了一个视频，"),s("a",{attrs:{href:"http://www.haorooms.com/post/js_jquery_whljyy",target:"_blank",rel:"noopener noreferrer"}},[t._v("js/jquery各种宽高的理解和应用"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("这里主要讲一下：")]),t._v(" "),s("h5",{attrs:{id:"getboundingclientrect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getboundingclientrect"}},[t._v("#")]),t._v(" getBoundingClientRect")]),t._v(" "),s("p",[t._v("getBoundingClientRect 用来返回元素的大小以及相对于浏览器可视窗口的位置，用法如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var clientRect = element.getBoundingClientRect();  \n")])])]),s("p",[t._v("clientRect是一个 DOMRect 对象，包含width、height、left、top、right、bottom，它是相对于窗口顶部而不是文档顶部，滚动页面时它们的值是会发生变化的。")]),t._v(" "),s("h3",{attrs:{id:"_12-创建对象的多种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-创建对象的多种方式"}},[t._v("#")]),t._v(" 12.创建对象的多种方式")]),t._v(" "),s("h4",{attrs:{id:"_1-工厂模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-工厂模式"}},[t._v("#")]),t._v(" 1. 工厂模式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function createPerson(name) {\n    var o = new Object();\n    o.name = name;\n    o.getName = function () {\n        console.log(this.name);\n    };\n\n    return o;\n}\n\nvar person1 = createPerson('kevin');\n")])])]),s("p",[t._v("缺点：对象无法识别，因为所有的实例都指向一个原型")]),t._v(" "),s("h4",{attrs:{id:"_2-构造函数模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-构造函数模式"}},[t._v("#")]),t._v(" 2. 构造函数模式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function Person(name) {\n    this.name = name;\n    this.getName = function () {\n        console.log(this.name);\n    };\n}\n\nvar person1 = new Person('kevin');\n")])])]),s("p",[t._v("优点：实例可以识别为一个特定的类型")]),t._v(" "),s("p",[t._v("缺点：每次创建实例时，每个方法都要被创建一次")]),t._v(" "),s("h5",{attrs:{id:"_2-1-构造函数模式优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-构造函数模式优化"}},[t._v("#")]),t._v(" 2.1 构造函数模式优化")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function Person(name) {\n    this.name = name;\n    this.getName = getName;\n}\n\nfunction getName() {\n    console.log(this.name);\n}\n\nvar person1 = new Person('kevin');\n")])])]),s("p",[t._v("优点：解决了每个方法都要被重新创建的问题")]),t._v(" "),s("p",[t._v("缺点：这叫啥封装……")]),t._v(" "),s("h4",{attrs:{id:"_3-原型模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-原型模式"}},[t._v("#")]),t._v(" 3. 原型模式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function Person(name) {\n\n}\n\nPerson.prototype.name = 'keivn';\nPerson.prototype.getName = function () {\n    console.log(this.name);\n};\n\nvar person1 = new Person();\n")])])]),s("p",[t._v("优点：方法不会重新创建")]),t._v(" "),s("p",[t._v("缺点：1. 所有的属性和方法都共享 2. 不能初始化参数")]),t._v(" "),s("h5",{attrs:{id:"_3-1-原型模式优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-原型模式优化"}},[t._v("#")]),t._v(" 3.1 原型模式优化")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function Person(name) {\n\n}\n\nPerson.prototype = {\n    name: 'kevin',\n    getName: function () {\n        console.log(this.name);\n    }\n};\n\nvar person1 = new Person();\n")])])]),s("p",[t._v("优点：封装性好了一点")]),t._v(" "),s("p",[t._v("缺点：重写了原型，丢失了constructor属性")]),t._v(" "),s("h5",{attrs:{id:"_3-2-原型模式优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-原型模式优化"}},[t._v("#")]),t._v(" 3.2 原型模式优化")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function Person(name) {\n\n}\n\nPerson.prototype = {\n    constructor: Person,\n    name: 'kevin',\n    getName: function () {\n        console.log(this.name);\n    }\n};\n\nvar person1 = new Person();\n")])])]),s("p",[t._v("优点：实例可以通过constructor属性找到所属构造函数")]),t._v(" "),s("p",[t._v("缺点：原型模式该有的缺点还是有")]),t._v(" "),s("h4",{attrs:{id:"_4-组合模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-组合模式"}},[t._v("#")]),t._v(" 4. 组合模式")]),t._v(" "),s("p",[t._v("构造函数模式与原型模式双剑合璧。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype = {\n    constructor: Person,\n    getName: function () {\n        console.log(this.name);\n    }\n};\n\nvar person1 = new Person();\n")])])]),s("p",[t._v("优点：该共享的共享，该私有的私有，使用最广泛的方式")]),t._v(" "),s("p",[t._v("缺点：有的人就是希望全部都写在一起，即更好的封装性")]),t._v(" "),s("h5",{attrs:{id:"_4-1-动态原型模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-动态原型模式"}},[t._v("#")]),t._v(" 4.1 动态原型模式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('function Person(name) {\n    this.name = name;\n    if (typeof this.getName != "function") {\n        Person.prototype.getName = function () {\n            console.log(this.name);\n        }\n    }\n}\n\nvar person1 = new Person();\n')])])]),s("p",[t._v("注意：使用动态原型模式时，不能用对象字面量重写原型")]),t._v(" "),s("p",[t._v("解释下为什么：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function Person(name) {\n    this.name = name;\n    if (typeof this.getName != \"function\") {\n        Person.prototype = {\n            constructor: Person,\n            getName: function () {\n                console.log(this.name);\n            }\n        }\n    }\n}\n\nvar person1 = new Person('kevin');\nvar person2 = new Person('daisy');\n\n// 报错 并没有该方法\nperson1.getName();\n\n// 注释掉上面的代码，这句是可以执行的。\nperson2.getName();\n")])])]),s("p",[t._v("为了解释这个问题，假设开始执行"),s("code",[t._v("var person1 = new Person('kevin')")]),t._v("。")]),t._v(" "),s("p",[t._v("如果对 new 和 apply 的底层执行过程不是很熟悉，可以阅读底部相关链接中的文章。")]),t._v(" "),s("p",[t._v("我们回顾下 new 的实现步骤：")]),t._v(" "),s("ol",[s("li",[t._v("首先新建一个对象")]),t._v(" "),s("li",[t._v("然后将对象的原型指向 Person.prototype")]),t._v(" "),s("li",[t._v("然后 Person.apply(obj)")]),t._v(" "),s("li",[t._v("返回这个对象")])]),t._v(" "),s("p",[t._v("注意这个时候，回顾下 apply 的实现步骤，会执行 obj.Person 方法，这个时候就会执行 if 语句里的内容，注意构造函数的 prototype 属性指向了实例的原型，使用字面量方式直接覆盖 Person.prototype，并不会更改实例的原型的值，person1 依然是指向了以前的原型，而不是 Person.prototype。而之前的原型是没有 getName 方法的，所以就报错了！")]),t._v(" "),s("p",[t._v("如果你就是想用字面量方式写代码，可以尝试下这种：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function Person(name) {\n    this.name = name;\n    if (typeof this.getName != \"function\") {\n        Person.prototype = {\n            constructor: Person,\n            getName: function () {\n                console.log(this.name);\n            }\n        }\n\n        return new Person(name);\n    }\n}\n\nvar person1 = new Person('kevin');\nvar person2 = new Person('daisy');\n\nperson1.getName(); // kevin\nperson2.getName();  // daisy\n")])])]),s("h5",{attrs:{id:"_5-1-寄生构造函数模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-寄生构造函数模式"}},[t._v("#")]),t._v(" 5.1 寄生构造函数模式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function Person(name) {\n\n    var o = new Object();\n    o.name = name;\n    o.getName = function () {\n        console.log(this.name);\n    };\n\n    return o;\n\n}\n\nvar person1 = new Person('kevin');\nconsole.log(person1 instanceof Person) // false\nconsole.log(person1 instanceof Object)  // true\n")])])]),s("p",[t._v("寄生构造函数模式，我个人认为应该这样读：")]),t._v(" "),s("p",[t._v("寄生-构造函数-模式，也就是说寄生在构造函数的一种方法。")]),t._v(" "),s("p",[t._v("也就是说打着构造函数的幌子挂羊头卖狗肉，你看创建的实例使用 instanceof 都无法指向构造函数！")]),t._v(" "),s("p",[t._v("这样方法可以在特殊情况下使用。比如我们想创建一个具有额外方法的特殊数组，但是又不想直接修改Array构造函数，我们可以这样写：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function SpecialArray() {\n    var values = new Array();\n\n    for (var i = 0, len = arguments.length; i < len; i++) {\n        values.push(arguments[i]);\n    }\n\n    values.toPipedString = function () {\n        return this.join(\"|\");\n    };\n    return values;\n}\n\nvar colors = new SpecialArray('red', 'blue', 'green');\nvar colors2 = SpecialArray('red2', 'blue2', 'green2');\n\n\nconsole.log(colors);\nconsole.log(colors.toPipedString()); // red|blue|green\n\nconsole.log(colors2);\nconsole.log(colors2.toPipedString()); // red2|blue2|green2\n")])])]),s("p",[t._v("你会发现，其实所谓的寄生构造函数模式就是比工厂模式在创建对象的时候，多使用了一个new，实际上两者的结果是一样的。")]),t._v(" "),s("p",[t._v("但是作者可能是希望能像使用普通 Array 一样使用 SpecialArray，虽然把 SpecialArray 当成函数也一样能用，但是这并不是作者的本意，也变得不优雅。")]),t._v(" "),s("p",[t._v("在可以使用其他模式的情况下，不要使用这种模式。")]),t._v(" "),s("p",[t._v("但是值得一提的是，上面例子中的循环：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("for (var i = 0, len = arguments.length; i < len; i++) {\n    values.push(arguments[i]);\n}\n")])])]),s("p",[t._v("可以替换成：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("values.push.apply(values, arguments);\n")])])]),s("h5",{attrs:{id:"_5-2-稳妥构造函数模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-稳妥构造函数模式"}},[t._v("#")]),t._v(" 5.2 稳妥构造函数模式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function person(name){\n    var o = new Object();\n    o.sayName = function(){\n        console.log(name);\n    };\n    return o;\n}\n\nvar person1 = person('kevin');\n\nperson1.sayName(); // kevin\n\nperson1.name = \"daisy\";\n\nperson1.sayName(); // kevin\n\nconsole.log(person1.name); // daisy\n")])])]),s("p",[t._v("所谓稳妥对象，指的是没有公共属性，而且其方法也不引用 this 的对象。")]),t._v(" "),s("p",[t._v("与寄生构造函数模式有两点不同：")]),t._v(" "),s("ol",[s("li",[t._v("新创建的实例方法不引用 this")]),t._v(" "),s("li",[t._v("不使用 new 操作符调用构造函数")])]),t._v(" "),s("p",[t._v("稳妥对象最适合在一些安全的环境中。")]),t._v(" "),s("p",[t._v("稳妥构造函数模式也跟工厂模式一样，无法识别对象所属类型。")]),t._v(" "),s("h4",{attrs:{id:"new-一个对象具体做了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new-一个对象具体做了什么"}},[t._v("#")]),t._v(" new 一个对象具体做了什么")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//模拟一个new")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("New")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//取出第一个参数，就是我们要传入的构造函数；此外因为shift会修改原数组，所以arguments会被去除第一个参数")]),t._v("\n    Constructor"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将obj的原型指向构造函数，这样obj就可以访问到构造函数原型中的属性")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_proto_"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用apply改变构造函数this的指向到新建的对象，这样obj就可以访问到构造函数中的属性")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ret"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//要返回obj")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" ret"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("使用关键字new创建新实例对象经过了以下几步：")]),t._v(" "),s("p",[t._v("1、创建一个新对象，如：var person = {};")]),t._v(" "),s("p",[t._v("2、新对象的"),s("em",[t._v("proto")]),t._v("属性指向构造函数的原型对象。")]),t._v(" "),s("p",[t._v("3、将构造函数的作用域赋值给新对象。（也所以this对象指向新对象）")]),t._v(" "),s("p",[t._v("4、执行构造函数内部的代码，将属性添加给person中的this对象。")]),t._v(" "),s("p",[t._v("5、返回新对象person。")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_proto_ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//引用构造函数的原型对象  ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将构造函数的作用域给person,即：this值指向person  ")]),t._v("\n\n  Function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methos")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"new"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//新创建一个对象，它继承了构造器的原型对象。  ")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" that "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此时，this是指向Function构造器的。  ")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用构造器，绑定this对象到新对象that上  ")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" other "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("that"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argument"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此时，this对象指向that对象。  ")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果它的返回值不是一个对象，就返回新的对象。  ")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" other "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" other"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" that"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),s("p",[t._v("通过new关键字创建某构造函数的新实例对象，就是将原型链与实例的this联系起来，this指向这个新对象，同时也指向这个构造函数，并且this对象还是这个构造函数的实例。如果没有使用new操作符，直接用构造函数创建新实例对象，那么this对象就指向了window对象，不会指向这个新对象的，不管给这个新对象添加什么属性，都没有用，是直接添加到了window对象上了。")]),t._v(" "),s("h3",{attrs:{id:"_13-变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-变量提升"}},[t._v("#")]),t._v(" 13.变量提升")]),t._v(" "),s("p",[t._v("JavaScript中奇怪的一点是你可以在变量和函数声明之前使用它们。就好像是变量声明和函数声明被"),s("strong",[t._v("提升")]),t._v("了代码的顶部一样。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sayHi() // Hi there!\n\nfunction sayHi() {\n    console.log('Hi there!')\n}\n\nname = 'John Doe'\nconsole.log(name)   // John Doe\nvar name\n复制代码\n")])])]),s("p",[t._v("然而JavaScript并不会移动你的代码，所以JavaScript中“变量提升”并不是真正意义上的“提升”。")]),t._v(" "),s("p",[t._v("JavaScript是单线程语言，所以执行肯定是按顺序执行。但是并不是逐行的分析和执行，而是一段一段地分析执行，会先进行编译阶段然后才是执行阶段。")]),t._v(" "),s("p",[t._v("在编译阶段阶段，代码真正执行前的几毫秒，会检测到所有的变量和函数声明，所有这些函数和变量声明都被添加到名为"),s("a",{attrs:{href:"https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lexical Environment"),s("OutboundLink")],1),t._v("的JavaScript数据结构内的内存中。所以这些变量和函数能在它们真正被声明之前使用。")]),t._v(" "),s("h4",{attrs:{id:"函数提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数提升"}},[t._v("#")]),t._v(" 函数提升")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sayHi() // Hi there!\n\nfunction sayHi() {\n    console.log('Hi there!')\n}\n复制代码\n")])])]),s("p",[t._v("因为函数声明在编译阶段会被添加到词法环境（Lexical Environment）中，当JavaScript引擎遇到"),s("code",[t._v("sayHi()")]),t._v("函数时，它会从词法环境中找到这个函数并执行它。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("lexicalEnvironment = {\n  sayHi: < func >\n}\n复制代码\n")])])]),s("h4",{attrs:{id:"var变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var变量提升"}},[t._v("#")]),t._v(" var变量提升")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("console.log(name)   // 'undefined'\nvar name = 'John Doe'\nconsole.log(name)   // John Doe\n")])])]),s("p",[t._v("上面的代码实际上分为两个部分：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("var name")]),t._v("表示声明变量"),s("code",[t._v("name")])]),t._v(" "),s("li",[s("code",[t._v("= 'John Doe'")]),t._v("表示的是为变量"),s("code",[t._v("name")]),t._v("赋值为'John Doe'。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var name    // 声明变量\nname = 'John Doe' // 赋值操作\n复制代码\n")])])]),s("p",[t._v("只有声明操作"),s("code",[t._v("var name")]),t._v("会被提升，而赋值这个操作并不会被提升，但是为什么变量"),s("code",[t._v("name")]),t._v("的值会是"),s("code",[t._v("undefined")]),t._v("呢?")]),t._v(" "),s("p",[t._v("原因是当JavaScript在编译阶段会找到"),s("code",[t._v("var")]),t._v("关键字声明的变量会添加到词法环境中，并初始化一个值"),s("code",[t._v("undefined")]),t._v("，在之后执行代码到赋值语句时，会把值赋值到这个变量。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 编译阶段\nlexicalEnvironment = {\n  name: undefined\n}\n\n// 执行阶段\nlexicalEnvironment = {\n  name: 'John Doe'\n}\n复制代码\n")])])]),s("p",[t._v("所以函数表达式也不会被“提升”。"),s("code",[t._v("helloWorld")]),t._v("是一个默认值是"),s("code",[t._v("undefined")]),t._v("的变量，而不是一个"),s("code",[t._v("function")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("helloWorld();  // TypeError: helloWorld is not a function\n\nvar helloWorld = function(){\n  console.log('Hello World!');\n}\n复制代码\n")])])]),s("h4",{attrs:{id:"class提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class提升"}},[t._v("#")]),t._v(" Class提升")]),t._v(" "),s("p",[t._v("同"),s("code",[t._v("let")]),t._v("和"),s("code",[t._v("const")]),t._v("一样，"),s("code",[t._v("class")]),t._v("在JavaScript中也是会被“提升”的，在被真正赋值之前都不会被初始化值, 同样受"),s("strong",[t._v("Temporal Dead Zone")]),t._v("的影响。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let peter = new Person('Peter', 25) // ReferenceError: Person is not defined\n\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n\nlet John = new Person('John', 25); \nconsole.log(peter) // Person { name: 'John', age: 25 }\n")])])]),s("h3",{attrs:{id:"_14-有关事件的面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-有关事件的面试题"}},[t._v("#")]),t._v(" 14.有关事件的面试题")]),t._v(" "),s("h4",{attrs:{id:"_1-mouseover和mouseenter两个事件有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-mouseover和mouseenter两个事件有什么区别"}},[t._v("#")]),t._v(" 1.mouseover和mouseenter两个事件有什么区别？")]),t._v(" "),s("p",[t._v("二者的区别是mouseenter不会冒泡（bubble）")]),t._v(" "),s("p",[s("strong",[t._v("详细解释一下")])]),t._v(" "),s("p",[t._v("当二者绑定的元素都没有子元素时，二者的行为是一致的。但是二者内部都包含子元素时，行为就不一样了。")]),t._v(" "),s("p",[t._v("在mouseover绑定的元素中，鼠标每次进入一个子元素就会触发一次mouseover事件，而mouseenter只会触发一次。")]),t._v(" "),s("h4",{attrs:{id:"_2-移动端的click事件行为与pc端有什么不同-如何屏蔽掉这个不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-移动端的click事件行为与pc端有什么不同-如何屏蔽掉这个不同"}},[t._v("#")]),t._v(" 2.移动端的click事件行为与PC端有什么不同？如何屏蔽掉这个不同？")]),t._v(" "),s("p",[t._v("移动端的click事件会延迟300ms触发事件回调（只在部分手机浏览器上出现）。")]),t._v(" "),s("p",[s("strong",[t._v("为什么会这样？")])]),t._v(" "),s("p",[t._v("因为手机浏览器中需要处理如翻页这样复杂的手势。在用户做翻页或双击放大等操作时，是先将手指触碰到屏幕（此时理应已经触发了click事件），然后再上下移动手指，浏览器开发厂商为了识别这种事件，所以加入了300ms延迟的处理。")]),t._v(" "),s("p",[s("strong",[t._v("解决方法")])]),t._v(" "),s("p",[t._v("可以引入Fastclick.js来解决这个问题。它的原理是 FastClick 在检测到touchend事件的时候，会通过 DOM 自定义事件立即触发一个模拟click事件，并把浏览器在 300 毫秒之后真正触发的click事件阻止掉。")]),t._v(" "),s("h4",{attrs:{id:"_3-event对象中-target和currenttarget的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-event对象中-target和currenttarget的区别"}},[t._v("#")]),t._v(" "),s("code",[t._v("3")]),t._v(".Event对象中，target和currentTarget的区别？")]),t._v(" "),s("p",[t._v("currentTarget是当事件遍历DOM时，标识事件的当前目标。它总是引用事件处理程序附加到的元素，而不是event.target，event.target标识事件发生的元素。")]),t._v(" "),s("p",[t._v("有个简单的验证方法，你会在下面的例子中看到e.currentTarget一直返回的是body元素，而e.target则随着你点击位置的不同而变化")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("enter-sensitive"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("item 1-1"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("item 1-2"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("enter-sensitive"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("item 2-1"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("item 2-2"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}},[s("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n        document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("currentTarget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h4",{attrs:{id:"_4-说一下事件冒泡和事件捕获"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-说一下事件冒泡和事件捕获"}},[t._v("#")]),t._v(" "),s("code",[t._v("4")]),t._v(".说一下事件冒泡和事件捕获")]),t._v(" "),s("p",[t._v("https://segmentfault.com/a/1190000005654451")]),t._v(" "),s("p",[t._v("事件冒泡是指 事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接受，然后逐级向上传播到较为不具体的节点（文档）。")]),t._v(" "),s("p",[s("strong",[t._v("阻止事件冒泡的方法。")])]),t._v(" "),s("p",[t._v("调用当前事件对象的stopPropagation()方法")]),t._v(" "),s("p",[s("strong",[t._v("阻止默认事件")])]),t._v(" "),s("p",[t._v("调用当前事件对象的preventDefault()方法")]),t._v(" "),s("h4",{attrs:{id:"_5-是否了解移动端的点击穿透-原理及解决方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-是否了解移动端的点击穿透-原理及解决方法"}},[t._v("#")]),t._v(" 5.是否了解移动端的点击穿透，原理及解决方法？")]),t._v(" "),s("p",[t._v("有上面click事件300ms延迟的讲解，这个“点击穿透”就能好理解一些。")]),t._v(" "),s("p",[s("strong",[t._v("点击穿透")]),t._v("是指在移动端，由于click事件延迟300ms触发，那么如果300ms内，页面显示变化（主要是指DOM的隐藏和显示）的话，会出现实际点击元素触发了touch事件，而300ms后该位置的实际元素又被再次触发了click事件的情况。")]),t._v(" "),s("p",[t._v("下面是我在网上找到的点击穿透的现象详细说明：")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("点击穿透现象有3种：")]),t._v(" "),s("strong",[t._v("点击穿透问题")]),t._v("：点击蒙层（mask）上的关闭按钮，蒙层消失后发现触发了按钮下面元素的click事件。\n蒙层的关闭按钮绑定的是touch事件，而按钮下面元素绑定的是click事件，touch事件触发之后，蒙层消失了，300ms后这个点的click事件fire，event的target自然就是按钮下面的元素，因为按钮跟蒙层一起消失了。")]),t._v(" "),s("p",[s("strong",[t._v("跨页面点击穿透问题")]),t._v("：如果按钮下面恰好是一个有href属性的a标签，那么页面就会发生跳转。\n因为 "),s("em",[t._v("a标签跳转默认是click事件触发")]),t._v(" ，所以原理和上面的完全相同。")]),t._v(" "),s("p",[s("strong",[t._v("另一种跨页面点击穿透问题")]),t._v("：这次没有mask了，直接点击页内按钮跳转至新页，然后发现新页面中对应位置元素的click事件被触发了。")])]),t._v(" "),s("p",[s("strong",[t._v("避免方法")]),t._v("在上面的问题中已经说过，可以引入fastclick之类的插件来解决。")]),t._v(" "),s("h4",{attrs:{id:"_6-是否了解事件委托"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-是否了解事件委托"}},[t._v("#")]),t._v(" "),s("code",[t._v("6")]),t._v(".是否了解事件委托？")]),t._v(" "),s("p",[t._v("https://juejin.im/post/5acb1bcf6fb9a028dc414fc6")]),t._v(" "),s("p",[s("em",[t._v("这道题通常情况下会有好几种引出方式，看面试官如何带节奏了~")])]),t._v(" "),s("p",[s("em",[t._v("比如，会问你如何给一个超长的商品列表中的每个商品绑定一个点击事件啊？如何解决大量事件绑定造成的内存开销问题啊？")])]),t._v(" "),s("p",[t._v("其实，这些问题都是想确认你是否有事件委托的意识。")]),t._v(" "),s("p",[t._v("事件委托是指利用“事件冒泡”，只通过指定一个事件处理程序，来管理某一类型的所有事件。也就是说，当此事件处理程序被触发时，通过当前事件对象中的target来确认究竟是在哪个元素触发的事件，从而达到一次注册 处理多个元素触发事件的目的。")]),t._v(" "),s("h4",{attrs:{id:"_7-什么是事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-什么是事件循环"}},[t._v("#")]),t._v(" 7.什么是事件循环？")]),t._v(" "),s("p",[t._v("事件循环是一个大概念，想要讲透不是几句话可以说清的。当然如果面试官问到了，他的初衷也绝对不是想让你透彻的讲解一遍，只是想确认面试者对于JS运行机制的了解程度。")]),t._v(" "),s("p",[t._v("好，我试着笼统地概括一下。")]),t._v(" "),s("p",[t._v("JavaScript是单线程的，“主线程”负责执行所有的同步任务，一旦所有同步任务执行完成，则立即从“任务队列”中读取最优先的任务放到“主线程”中执行，如此循环往复。向“任务队列”插入的是一个个事件处理函数（确切的说是函数地址）或定时任务（setTimeout的回调）。")]),t._v(" "),s("h4",{attrs:{id:"_8-css3中有哪些属性可以直接影响js中的事件-可以讲一下pointer-events和touch-action属性吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-css3中有哪些属性可以直接影响js中的事件-可以讲一下pointer-events和touch-action属性吗"}},[t._v("#")]),t._v(" 8. css3中有哪些属性可以直接影响JS中的事件？（可以讲一下pointer-events和touch-action属性吗）")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("pointer-events")])]),t._v(" CSS 属性指定在什么情况下 (如果有) 某个特定的图形元素可以成为鼠标事件的 "),s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/API/event.target",target:"_blank",rel:"noopener noreferrer"}},[t._v("target"),s("OutboundLink")],1),t._v("。当该属性值设定为"),s("code",[t._v("none")]),t._v("时 表示鼠标事件“穿透”该元素并且指定该元素“下面”的任何东西。")]),t._v(" "),s("p",[t._v("需要注意的是，如果当前元素的pointer-events属性指定位none，但是当其后代元素的"),s("code",[t._v("pointer-events")]),t._v("属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶段触发父元素的事件侦听器。")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("touch-action")])]),t._v(" 用于指定某个给定的区域是否允许用户操作，以及如何响应用户操作（比如浏览器自带的划动、缩放等）。")]),t._v(" "),s("p",[t._v("最常见的用法是禁用元素（及其不可滚动的后代）上的所有手势，以使用自己提供的拖放和缩放行为（如地图或游戏表面）。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("#map {\n  touch-action: none;\n}\n")])])]),s("hr"),t._v(" "),s("p",[t._v("总结：现在很多框架（如Vue、React）已经将事件绑定和处理都封装了，如果你是框架的强依赖开发者的话，很多问题你可能并不会遇到，如你几乎不需要理解Event对象中的target。")]),t._v(" "),s("p",[t._v("但是话说回来，用人单位和面试官（有水平的那种）其实希望面试者是真正掌握JavaScript这门语言，而并不是掌握某某框架的使用方法，大家应该清楚其中的不同。")]),t._v(" "),s("h3",{attrs:{id:"_15-关于数据类型转换的面试总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-关于数据类型转换的面试总结"}},[t._v("#")]),t._v(" 15.关于数据类型转换的面试总结")]),t._v(" "),s("h4",{attrs:{id:"_1-下面的代码输出是什么-解释其原理。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-下面的代码输出是什么-解释其原理。"}},[t._v("#")]),t._v(" 1.下面的代码输出是什么？解释其原理。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出1,23,4")]),t._v("\n")])])]),s("p",[t._v("原理：")]),t._v(" "),s("p",[t._v("a + b运算操作中，a和b用“+”连接，使得a和b都要先进行隐式强制类型转换，再做“加”运算。")]),t._v(" "),s("ul",[s("li",[t._v("当“+”符号两端存在一个或两个不是数字类型的值时，需要把“+”符号两端都先进行“取原始值”操作（ToPrimitive）。")]),t._v(" "),s("li",[t._v("a和b都是数组类型，要进行取原始值操作的话，解析器会对数组先调用valueOf()方法，如果有该方法并且返回值是原始类型的话就是这个返回值；否则继续调用toString()方法，如果返回的是原始值，则利用这个返回值进行“加”运算；否则会抛出异常")]),t._v(" "),s("li",[t._v('那么对于这个例子来说，[1,2]和[3,4]最终会调用toString()方法，分别返回字符串"1,2"和"3,4",再进行“加”运算后，结果就是"1,23,4"')])]),t._v(" "),s("h4",{attrs:{id:"_2-代码-和-输出的结果又什么不同-解释其原理。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码-和-输出的结果又什么不同-解释其原理。"}},[t._v("#")]),t._v(" 2.代码 []+{} 和 {} + [] 输出的结果又什么不同？解释其原理。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("结果如下：")]),t._v(" "),s("ul",[s("li",[t._v('"[object Object]"')]),t._v(" "),s("li",[t._v("0")])])]),t._v(" "),s("li",[s("p",[t._v("原理：")]),t._v(" "),s("p",[t._v("上面的问题涉及到JavaScript语法解析，所以"),s("em",[t._v("不要把上面问题中的表达式以参数形式传递到console.log()或alert()方法中进行试验")]),t._v("，那样你得到的结果会不一样。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("先说[]+{}")])])]),t._v(" "),s("p",[t._v('这里会与第一题很相似，都会去取原始值，左侧的数组结果为空字符串""，右侧的空Object的结果为字符串"[object Object]"，那么再进行加运算的话，就是字符串拼接，最终结果为"[object Object]"')]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("再说{}+[]")])])]),t._v(" "),s("p",[t._v('这里有些意外，因为涉及到了JavaScript的语法解析规则。在这段代码中，解析器遇到{}后将其解析为了一个空的代码块，而又将"+[]"解析为对于空数组的一元操作“+”，也就是将数组强制转换为数字，而空数组转换为数字的话就是0，那么最后结果自然就是0了。')])])]),t._v(" "),s("h4",{attrs:{id:"_3-说说什么是-显式强制类型转换-和-隐式强制类型转换-谈谈你对于二者的看法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-说说什么是-显式强制类型转换-和-隐式强制类型转换-谈谈你对于二者的看法"}},[t._v("#")]),t._v(" 3.说说什么是 显式强制类型转换 和 隐式强制类型转换？谈谈你对于二者的看法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("显式强制类型转换是通过显而易见的、目的明确的代码将数据进行强制类型转换，如Number()就是将变量显式的强制转换为数字类型的值。")])]),t._v(" "),s("li",[s("p",[t._v("隐式强制类型转换往往是一些操作的附带产物，如if(){}中会将括号内的部分转换为布尔类型。")])]),t._v(" "),s("li",[s("p",[t._v("而关于”显式“和”隐式“是很主观的，如果+”123“对你来说，你一眼就能看出这是将字符串”123“转换为数字的操作，那么这对于你来说就是显式的强制类型转换。")])])]),t._v(" "),s("h4",{attrs:{id:"_4-将一个变量强制转换为字符串-你能说几种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-将一个变量强制转换为字符串-你能说几种方法"}},[t._v("#")]),t._v(" 4.将一个变量强制转换为字符串，你能说几种方法？")]),t._v(" "),s("ul",[s("li",[t._v("使用String() ——String(123)")]),t._v(" "),s("li",[t._v("直接调用toString()方法——var a = 123;a.toString();")]),t._v(" "),s("li",[t._v("使用JSON.stringify()方法——JSON.stringify()")]),t._v(" "),s("li",[t._v("利用字符串拼接——123+”“")])]),t._v(" "),s("p",[t._v("其中第一种最为稳妥。")]),t._v(" "),s("p",[t._v("第二种的缺点是，如果对象修改了自身的toString()方法的话，会影响到最终结果")]),t._v(" "),s("p",[t._v("第三种的缺点是，缺点还是很多的……，如果传入的参数本身就是字符串的话，返回的结果是带双引号的，如下面：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//""123""')]),t._v("\n")])])]),s("p",[t._v("如果传入的是Object还要确保没有递归引用，否则会抛出异常，如下面")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("param "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("param "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Uncaught TypeError: Converting circular structure to JSON")]),t._v("\n")])])]),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),s("OutboundLink")],1),t._v("还给出了下面的注意提醒：")]),t._v(" "),s("p",[t._v("关于序列化，有下面五点注意事项：")]),t._v(" "),s("ul",[s("li",[t._v("非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。")]),t._v(" "),s("li",[t._v("布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。")]),t._v(" "),s("li",[s("code",[t._v("undefined、")]),t._v("任意的函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 "),s("code",[t._v("null")]),t._v("（出现在数组中时）。")]),t._v(" "),s("li",[t._v("所有以 symbol 为属性键的属性都会被完全忽略掉，即便 "),s("code",[t._v("replacer")]),t._v(" 参数中强制指定包含了它们。")]),t._v(" "),s("li",[t._v("不可枚举的属性会被忽略")])]),t._v(" "),s("p",[t._v("第四种的缺点是，表面上看上去应该和第一种String()是一样的，但是其实还是有些差距的，下一题咱们再讨论。")]),t._v(" "),s("h4",{attrs:{id:"_5-通常的两种转字符串的方法-string-a-和-a-。他们之间是否存在差异"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-通常的两种转字符串的方法-string-a-和-a-。他们之间是否存在差异"}},[t._v("#")]),t._v(' 5.通常的两种转字符串的方法： String(a) 和 a+""。他们之间是否存在差异？')]),t._v(" "),s("p",[t._v("两者看上去都是将变量转换为字符串，但是还是有个细微差别的。")]),t._v(" "),s("p",[t._v("看下面的例子：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"456"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"456"')]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"123"')]),t._v("\n")])])]),s("p",[t._v('通过现象可以看得出来，String()是直接调用了a的toString()方法，而a+""则是先调用了valueOf()方法。原因是加运算是隐式强制类型转换，会对两端操作数进行ToPrimitive操作，前面已经说过，这里不再赘述。')]),t._v(" "),s("p",[t._v("这里有个经典的例子，就是在ES6下对于Symbol类型值进行字符串转换时。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'first'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"Symbol(first)"')]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Uncaught TypeError: Cannot convert a Symbol value to a string")]),t._v("\n")])])]),s("h4",{attrs:{id:"_6-有哪些值强制转换成布尔类型时结果为false"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-有哪些值强制转换成布尔类型时结果为false"}},[t._v("#")]),t._v(" 6.有哪些值强制转换成布尔类型时结果为false？")]),t._v(" "),s("p",[s("strong",[t._v("此题必考！")])]),t._v(" "),s("ul",[s("li",[t._v("undefined")]),t._v(" "),s("li",[t._v("null")]),t._v(" "),s("li",[t._v("-0")]),t._v(" "),s("li",[t._v("+0")]),t._v(" "),s("li",[t._v("NaN")]),t._v(" "),s("li",[t._v("false")]),t._v(" "),s("li",[t._v('""')])]),t._v(" "),s("p",[t._v("此外还有一种是假值对象，注意下面的代码（在Chrome中运行）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("all"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出当前文档下的所有标签")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("all"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object HTMLAllCollection]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("all"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false,意外吧？！！！")]),t._v("\n")])])]),s("h4",{attrs:{id:"_7-宽松相等-和-严格相等-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-宽松相等-和-严格相等-有什么区别"}},[t._v("#")]),t._v(" 7.宽松相等== 和 严格相等 === 有什么区别？")]),t._v(" "),s("p",[t._v("很多人会说==  检查值是否相等，===检查值和类型是否相等”，")]),t._v(" "),s("p",[t._v("正解应该是== 允许在相等比较中进行强制类型转换，而===不允许”。")]),t._v(" "),s("h4",{attrs:{id:"_8-下面的代码输出是什么-解释其原理。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-下面的代码输出是什么-解释其原理。"}},[t._v("#")]),t._v(" 8.下面的代码输出是什么？解释其原理。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"666"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出false")]),t._v("\n")])])]),s("p",[t._v('可以看出，==两端是布尔类型和字符串类型的时候，会对两端都进行ToNumber操作，也就是"666"被转换为数字666，而true被传唤为1，所以最终结果自然为false。')]),t._v(" "),s("p",[t._v("说到这里，既然宽松相等的强制类型转换这么晦涩难懂而且不好记忆，那么我们应该怎么办？")]),t._v(" "),s("p",[t._v("给大家几个建议：")]),t._v(" "),s("ul",[s("li",[t._v("如果== 两端有true或false，那么千万不要使用==")]),t._v(" "),s("li",[t._v('如果== 两端的值中有[]、""、或者0，尽量不要使用==')])]),t._v(" "),s("h4",{attrs:{id:"_9-将一个变量强制转换为数字类型时-都进行了哪些操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-将一个变量强制转换为数字类型时-都进行了哪些操作"}},[t._v("#")]),t._v(" 9.将一个变量强制转换为数字类型时，都进行了哪些操作？")]),t._v(" "),s("p",[t._v("将变量强制转换为数字遵循的是ToNumber操作。")]),t._v(" "),s("p",[t._v("对于基本类型的话：")]),t._v(" "),s("ul",[s("li",[t._v("true → 1")]),t._v(" "),s("li",[t._v("false → 0")]),t._v(" "),s("li",[t._v("undefined → NaN")]),t._v(" "),s("li",[t._v("null → 0")]),t._v(" "),s("li",[t._v("对于字符串，遵循常量的相关规则语法，如果转化失败就返回NaN")])]),t._v(" "),s("p",[t._v("对于对象来说：")]),t._v(" "),s("p",[t._v("会先进行去原始值操作ToPrimitive，即先检查该值是否有valueOf()方法，如果有并且返回的基本类型值，就使用该值进行转强制类型转换。如果不是就使用toString()的返回值进行强制类型转换。如果valueOf()和toString()均不返回基本类型值，会产生TypeError错误。")]),t._v(" "),s("h3",{attrs:{id:"_16-有关数组的面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-有关数组的面试题"}},[t._v("#")]),t._v(" 16.有关数组的面试题")]),t._v(" "),s("h4",{attrs:{id:"_1-如何判断一个变量是否为数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何判断一个变量是否为数组"}},[t._v("#")]),t._v(" 1.如何判断一个变量是否为数组")]),t._v(" "),s("p",[s("em",[t._v("为什么不用typeof？")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" list  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"object"')]),t._v("\n")])])]),s("p",[t._v("Array继承与Object，所以typeof 会直接返回object，所以不可以用typeof方法来检测")]),t._v(" "),s("p",[s("em",[t._v("为什么不用instanceof?")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),s("p",[t._v("instanceof 表面上看确实是返回了true，但其实并不可靠。原因是Array实质是一个引用，用instanceof方法（包括下面的constructor方法）都是利用和引用地址进行比较的方法来确定的，但是在frame嵌套的情况下，每一个Array的引用地址都是不同的，比较起来结果也是不确定的，所以这种方法有其局限性。")]),t._v(" "),s("p",[s("em",[t._v("为什么不用constructor方法？")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),s("p",[t._v("原因已经解释过了，不再赘述。")]),t._v(" "),s("p",[s("strong",[t._v("可靠的检测数组方式")])]),t._v(" "),s("p",[t._v("1.利用Object的toString方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Array]")]),t._v("\n")])])]),s("p",[t._v("2.利用ES6的Array.isArray()方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),s("blockquote"),t._v(" "),s("h4",{attrs:{id:"_2-数组的原生方法有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-数组的原生方法有哪些"}},[t._v("#")]),t._v(" 2.数组的原生方法有哪些？")]),t._v(" "),s("h5",{attrs:{id:"会改变自身的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#会改变自身的方法"}},[t._v("#")]),t._v(" 会改变自身的方法")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.copyWithin()"),s("OutboundLink")],1),t._v(" 在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.fill()"),s("OutboundLink")],1),t._v(" 将数组中指定区间的所有元素的值，都替换成某个固定的值。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.pop()"),s("OutboundLink")],1),t._v("删除数组的最后一个元素，并返回这个元素。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.push()"),s("OutboundLink")],1),t._v("在数组的末尾增加一个或多个元素，并返回数组的新长度。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.reverse()"),s("OutboundLink")],1),t._v("颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.shift()"),s("OutboundLink")],1),t._v("删除数组的第一个元素，并返回这个元素。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.sort()"),s("OutboundLink")],1),t._v("对数组元素进行排序，并返回当前数组。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.splice()"),s("OutboundLink")],1),t._v("在任意的位置给数组添加或删除任意个元素。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.unshift()"),s("OutboundLink")],1),t._v("在数组的开头增加一个或多个元素，并返回数组的新长度。")]),t._v(" "),s("h5",{attrs:{id:"不会改变自身的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不会改变自身的方法"}},[t._v("#")]),t._v(" 不会改变自身的方法")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.concat()"),s("OutboundLink")],1),t._v("返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.includes()"),s("OutboundLink")],1),t._v(" 判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.join()"),s("OutboundLink")],1),t._v("连接所有数组元素组成一个字符串。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.slice()"),s("OutboundLink")],1),t._v("抽取当前数组中的一段元素组合成一个新数组。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.toSource()"),s("OutboundLink")],1),t._v(" 返回一个表示当前数组字面量的字符串。遮蔽了原型链上的 "),s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.prototype.toSource()"),s("OutboundLink")],1),t._v(" 方法。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toString",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.toString()"),s("OutboundLink")],1),t._v("返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 "),s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.prototype.toString()"),s("OutboundLink")],1),t._v(" 方法。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.toLocaleString()"),s("OutboundLink")],1),t._v("返回一个由所有数组元素组合而成的本地化后的字符串。遮蔽了原型链上的 "),s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.prototype.toLocaleString()"),s("OutboundLink")],1),t._v(" 方法。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.indexOf()"),s("OutboundLink")],1),t._v("返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.lastIndexOf()"),s("OutboundLink")],1),t._v("返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。")]),t._v(" "),s("h5",{attrs:{id:"遍历方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历方法"}},[t._v("#")]),t._v(" 遍历方法")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.forEach()"),s("OutboundLink")],1),t._v("为数组中的每个元素执行一次回调函数。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/entries",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.entries()"),s("OutboundLink")],1),t._v(" 返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.every()"),s("OutboundLink")],1),t._v("如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.some()"),s("OutboundLink")],1),t._v("如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.filter()"),s("OutboundLink")],1),t._v("将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.find()"),s("OutboundLink")],1),t._v(" 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.findIndex()"),s("OutboundLink")],1),t._v(" 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.keys()"),s("OutboundLink")],1),t._v(" 返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.map()"),s("OutboundLink")],1),t._v("返回一个由回调函数的返回值组成的新数组。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.reduce()"),s("OutboundLink")],1),t._v("从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.reduceRight()"),s("OutboundLink")],1),t._v("从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.values()"),s("OutboundLink")],1),t._v(" 返回一个数组迭代器对象，该迭代器会包含所有数组元素的值。")]),t._v(" "),s("p",[t._v("[Array.prototype"),s("a",{attrs:{href:""}},[t._v("@@iterator")]),t._v("](https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/%40%40iterator) 和上面的 values() 方法是同一个函数。")]),t._v(" "),s("blockquote",[s("p",[t._v("修改器方法：")])]),t._v(" "),s("ul",[s("li",[t._v("pop(): 删除数组的最后一个元素，并返回这个元素")]),t._v(" "),s("li",[t._v("push()：在数组的末尾增加一个或多个元素，并返回数组的新长度")]),t._v(" "),s("li",[t._v("reverse(): 颠倒数组中元素的排列顺序")]),t._v(" "),s("li",[t._v("shift(): 删除数组的第一个元素，并返回这个元素")]),t._v(" "),s("li",[t._v("unshift(): 在数组的开头增加一个或多个元素，并返回数组的新长度")]),t._v(" "),s("li",[t._v("sort(): 对数组元素进行排序，并返回当前数组")]),t._v(" "),s("li",[t._v("splice(): 在任意的位置给数组添加或删除任意个元素")])]),t._v(" "),s("blockquote",[s("p",[t._v("访问方法：")])]),t._v(" "),s("ul",[s("li",[t._v("concat(): 返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组")]),t._v(" "),s("li",[t._v("join(): 连接所有数组元素组成一个字符串")]),t._v(" "),s("li",[t._v("slice(): 抽取当前数组中的一段元素组合成一个新数组")]),t._v(" "),s("li",[t._v("indeOf(): 返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1")]),t._v(" "),s("li",[t._v("lastIndexOf(): 返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1")])]),t._v(" "),s("blockquote",[s("p",[t._v("迭代方法：")])]),t._v(" "),s("ul",[s("li",[t._v("forEach(): 为数组中的每个元素执行一次回调函数,最终返回 "),s("code",[t._v("undefined")])]),t._v(" "),s("li",[t._v("every(): 如果数组中的每个元素都满足测试函数，则返回 "),s("code",[t._v("true")]),t._v("，否则返回 false")]),t._v(" "),s("li",[t._v("some(): 如果数组中至少有一个元素满足测试函数，则返回 "),s("code",[t._v("true")]),t._v("，否则返回 false")]),t._v(" "),s("li",[t._v("filter(): 将所有在过滤函数中返回 "),s("code",[t._v("true")]),t._v(" 的数组元素放进一个新数组中并返回")]),t._v(" "),s("li",[t._v("map(): 返回一个由回调函数的返回值组成的新数组")])]),t._v(" "),s("h4",{attrs:{id:"_3-如何将一个类数组变量转化为数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何将一个类数组变量转化为数组"}},[t._v("#")]),t._v(" 3.如何将一个类数组变量转化为数组？")]),t._v(" "),s("p",[t._v("如果是ES6，可以用Array.from()方法。")]),t._v(" "),s("p",[t._v("如果不确定环境的话，可以用Array.prototype.slice.call()的方法，将类似数组转换为。")]),t._v(" "),s("p",[t._v("Array.from()的详解：")]),t._v(" "),s("p",[t._v("Set类型的转换")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["foo", window]')]),t._v("\n")])])]),s("p",[t._v("Map类型的转换")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [[1, 2], [2, 4], [4, 8]]")]),t._v("\n")])])]),s("p",[t._v("类数组的值")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1, 2, 3]")]),t._v("\n")])])]),s("p",[t._v("Array.from()的第二个参数mapFn也很有用处，可以对于传入的类数组值进行定制化修改")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Using an arrow function as the map function to")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// manipulate the elements")]),t._v("\nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [2, 4, 6]")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Generate a sequence of numbers")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Since the array is initialized with `undefined` on each position,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the value of `v` below will be `undefined`")]),t._v("\nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [0, 1, 2, 3, 4]")]),t._v("\n")])])]),s("h4",{attrs:{id:"_4-数组去重-你能说出多少种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-数组去重-你能说出多少种方法"}},[t._v("#")]),t._v(" "),s("code",[t._v("4")]),t._v(".数组去重，你能说出多少种方法？")]),t._v(" "),s("p",[t._v("1.利用一个空Object来实现（ES 5 可以利用两层for循环嵌套 然后比对两个元素是不是相同，如果相同则用splice 删除掉一个即可）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用indexof")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//排序去重")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("p",[t._v("2.利用ES6 的Set数据结构")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// [1, 2, "1"]')]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更加简化的版本")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//或者")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("unique")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"_5-你知道array-prototype的类型是什么吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-你知道array-prototype的类型是什么吗"}},[t._v("#")]),t._v(" 5.你知道Array.prototype的类型是什么吗？")]),t._v(" "),s("p",[t._v("其实Array.prototype是一个数组，只不过length为0")]),t._v(" "),s("h4",{attrs:{id:"_6-如何-打平-一个嵌套数组-如-1-2-3-4-5-1-2-3-4-5-你能说出多少种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-如何-打平-一个嵌套数组-如-1-2-3-4-5-1-2-3-4-5-你能说出多少种方法"}},[t._v("#")]),t._v(" 6.如何“打平”一个嵌套数组，如[1,[2,[3]],4,[5]] => [1,2,3,4,5]?你能说出多少种方法？")]),t._v(" "),s("p",[t._v("这个方法很多，如果你的答案是用递归的话，那确实有点low，而且代码会比较复杂。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("我的觉得可以用以下方法来解决这个问题：")]),t._v(" "),s("p",[t._v("1.利用Array.prototype.toString()方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1,2,3,4,5")]),t._v("\n")])])]),s("p",[t._v("原理：toString 方法返回一个字符串，该字符串由数组中的每个元素的 toString() 返回值经调用 join() 方法连接（由逗号隔开）组成。")]),t._v(" "),s("p",[t._v("2.利用Array.prototype.join()方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1,2,3,4,5")]),t._v("\n")])])]),s("p",[t._v("原理：join方法会让所有的数组元素转换成字符串，再用一个分隔符将这些字符串连接起来。如果元素是undefined 或者null， 则会转化成空字符串。")]),t._v(" "),s("p",[t._v("PS:如果你觉得上面输出的不是一个数组，可以稍微加工一下")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[1,2,3,4,5]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[1,2,3,4,5]")]),t._v("\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 扁平化一维数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1, 2, [3, 4]]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以扁平化多维数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("some")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"_7-如何克隆一个数组-你能说出多少种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-如何克隆一个数组-你能说出多少种"}},[t._v("#")]),t._v(" 7.如何克隆一个数组？你能说出多少种？")]),t._v(" "),s("p",[t._v("1.借用concat方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("2.借用slice方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("原理：数组本质上也是Object，直接赋值的话，只是将引用赋值给另一个变量，最终会导致被复制的变量也会随着原来的数组变化而变化。")]),t._v(" "),s("h4",{attrs:{id:"_8-说一说array-prototype-sort-方法的原理-追问-不传递参数会如何"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-说一说array-prototype-sort-方法的原理-追问-不传递参数会如何"}},[t._v("#")]),t._v(" 8.说一说Array.prototype.sort()方法的原理？（追问：不传递参数会如何？）")]),t._v(" "),s("p",[t._v("sort方法接受一个“比较函数”作为参数。")]),t._v(" "),s("p",[s("strong",[t._v("如果调用该方法时没有使用参数")]),t._v("，将按字母顺序对数组中的元素进行排序，说得更精确点，是"),s("strong",[t._v("按照字符编码的顺序进行排序")]),t._v("。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。")]),t._v(" "),s("p",[t._v("如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：\n若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。\n若 a 等于 b，则返回 0。\n若 a 大于 b，则返回一个大于 0 的值。")]),t._v(" "),s("h4",{attrs:{id:"_9-找出array中的最大元素-你能说出几种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-找出array中的最大元素-你能说出几种方法"}},[t._v("#")]),t._v(" 9.找出Array中的最大元素，你能说出几种方法？")]),t._v(" "),s("p",[t._v("1.自己实现一个冒泡算法，实现就不多说了")]),t._v(" "),s("p",[t._v("2.利用Math的max方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("43")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nMath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[1, 2, 9, 23, 43, 65, 100]")]),t._v("\n")])])]),s("p",[t._v("3.利用Array的sort方法先排序再取值")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("43")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[1, 2, 9, 23, 43, 65, 100]")]),t._v("\n")])])]),s("h4",{attrs:{id:"_10-合并数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-合并数组"}},[t._v("#")]),t._v(" 10.合并数组")]),t._v(" "),s("p",[t._v("有两个数组a、b，需求是将两个数组合并成一个。方法如下：")]),t._v(" "),s("p",[t._v("1、concat")]),t._v(" "),s("p",[t._v("js的Array对象提供了一个叫concat()方法，连接两个或更多的数组，并返回结果。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//c=[1,2,3,4,5,6]")]),t._v("\n")])])]),s("p",[t._v("这里有一个问题，concat方法连接a、b两个数组后，a、b两个数组的数据不变，同时会返回一个新的数组。这样当我们需要进行多次的数组合并时，会造成很大的内存浪费，所以这个方法肯定不是最好的。")]),t._v(" "),s("p",[t._v("2、for循环")]),t._v(" "),s("p",[t._v("大概的思路是：遍历其中一个数组，把该数组中的所有元素依次添加到另外一个数组中。直接上代码：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\n\n    a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这样的写法可以解决第一种方案中对内存的浪费，但是会有另一个问题：丑！这么说不是没有道理，如果能只用一行代码就搞定，岂不快哉~")]),t._v(" "),s("p",[t._v("3、apply")]),t._v(" "),s("p",[t._v("函数的apply方法有一个特性，那就是func.apply(obj,argv)，argv是一个数组。所以我们可以利用这点，直接上代码：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("调用a.push这个函数实例的apply方法，同时把，b当作参数传入，这样a.push这个方法就会遍历b数组的所有元素，达到合并的效果。")]),t._v(" "),s("p",[t._v("这里可能有点绕，我们可以把b看成[4,5,6]，变成这样：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  然后上面的操作就等同于：\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这样就很清楚了！")]),t._v(" "),s("p",[t._v("另外，还要注意两个小问题：")]),t._v(" "),s("p",[t._v("1）以上3种合并方法并没有考虑过a、b两个数组谁的长度更小。")]),t._v(" "),s("p",[t._v("所以好的做法是预先判断a、b两个数组哪个更大，然后使用大数组合并小数组，这样就减少了数组元素操作的次数！")]),t._v(" "),s("p",[t._v("2）有时候我们不希望原数组（a、b）改变，这时就只能使用concat了。")]),t._v(" "),s("h5",{attrs:{id:"es6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6"}},[t._v("#")]),t._v(" ES6")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("formatEs6ConcatArr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES5 的合并数组")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arr1.concat(arr2, arr3)")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 'a', 'b', 'c', 'd', 'e' ]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6 的合并数组")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arr4='")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 'a', 'b', 'c', 'd', 'e' ]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不过，这两种方法都是浅拷贝，使用的时候需要注意。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("bar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n上面代码中，a3和a4是用两种不同方法合并而成的新数组，但是它们的成员都是对原数组成员的引用，这就是浅拷贝。如果修改了原数组的成员，会同步反映到新数组。\n")])])]),s("h3",{attrs:{id:"_17-常考-如何实现深拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-常考-如何实现深拷贝"}},[t._v("#")]),t._v(" "),s("code",[t._v("17")]),t._v(".常考：如何实现深拷贝？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("浅拷贝")]),t._v("：浅拷贝就是把属于源对象的值都复制一遍到新的对象,不会开辟两者独立的内存区域;")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个 ES5的")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shallowClone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("sourceObj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先判断传入的是否为对象类型")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("sourceObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" sourceObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'您传入的不是对象!!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断传入的 Obj是类型,然后给予对应的赋值")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" targetObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sourceObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历所有 key")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" keys "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" sourceObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断所有属于自身原型链上的 key,而非继承(上游 )那些")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sourceObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一一复制过来")]),t._v("\n      targetObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sourceObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" targetObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6 可以用 Object.assign(targeObj, source1,source2,source3) 来实现对象浅拷贝")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[s("strong",[t._v("深度拷贝")]),t._v("：深度拷贝则是完完全全两个独立的内存区域,互不干扰")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 就是把需要赋值的类型转为基本类型(字符串这些)而非引用类型来实现")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JOSN对象中的stringify可以把一个js对象序列化为一个JSON字符串，parse可以把JSON字符串反序列化为一个js对象")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("deepClone")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("sourceObj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("sourceObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" sourceObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'您传入的不是对象!!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转->解析->返回一步到位")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sourceObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'您的浏览器不支持 JSON API'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//缺点：只能拷贝符合JSON数据标准类型的对象。当出现嵌套结构的时候 字符串反序列化容易乱")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"_18-常考-如何用正则实现-trim"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-常考-如何用正则实现-trim"}},[t._v("#")]),t._v(" 18.常考：如何用正则实现 trim()")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原生是有 trim()方法的.我们要模拟一个;")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("emuTrim")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这条正则很好理解,就是把头部尾部多余的空格字符去除")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(^\\s*)|(\\s*$)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  fsaf fsdaf f safl lllll    '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("emuTrim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"fsaf fsdaf f safl lllll"')]),t._v("\n")])])]),s("h3",{attrs:{id:"_19-js的运行机制了解吗-js是多线程还是单线程-那浏览器呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-js的运行机制了解吗-js是多线程还是单线程-那浏览器呢"}},[t._v("#")]),t._v(" 19.js的运行机制了解吗？js是多线程还是单线程？那浏览器呢？")]),t._v(" "),s("p",[t._v("答：浏览器是多线程的（more：一个tab页包含2个进程，分别是html引擎和js引擎），js是单线程语言。")]),t._v(" "),s("p",[t._v("js异步操作常见的有：DOM事件绑定、Ajax请求、setTimeout定时器。总的来说，涉及回调函数的都可以理解为异步操作。")]),t._v(" "),s("p",[t._v('js执行机制：所有同步任务都在主线程上的栈中执行 => 主线程之外，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件。=> 一旦"栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，选择出需要首先执行的任务（由浏览器决定，并不按序）。')]),t._v(" "),s("p",[t._v("讲就讲这么多，这个知识点真的很关键，这个搞不懂的话怎么好意思说自己是js开发，几个重要的知识点：1.堆、栈、队列的认识。")]),t._v(" "),s("h3",{attrs:{id:"_20-js原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-js原型链"}},[t._v("#")]),t._v(" "),s("code",[t._v("20")]),t._v(".JS原型链")]),t._v(" "),s("p",[t._v("定义层面上的理解：任何对象（函数、数组、对象）都有一个原型对象，这个原型对象由对象的内置属性（也叫隐式原型）_proto_指向它的构造函数的prototype（显式原型）指向的对象，即任何对象都是由一个构造函数创建的，但不是每一个对象都有prototype，只有函数（function）才有prototype。")]),t._v(" "),s("p",[t._v("方法/属性调用层面上的理解：当调用某种方法或查找某种属性时，首先会在自身调用和查找，如果自身并没有该方法或属性，则会去它的__proto__属性中调用查找，也就是它构造函数的prototype中调用查找。找都最后遇见null为止。")]),t._v(" "),s("p",[t._v("原型链算是 JS 内一种独有的机制,")]),t._v(" "),s("p",[t._v("所有对象都有一个内置"),s("code",[t._v("[[proto]]")]),t._v("指向创建它的原型对象("),s("code",[t._v("prototype")]),t._v(")")]),t._v(" "),s("p",[t._v("原型链的基本用来实现继承用的")])])}),[],!1,null,null,null);a.default=e.exports}}]);